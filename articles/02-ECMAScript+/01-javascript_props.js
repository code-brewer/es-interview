import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "text": "ECMAScript",
        "link": "articles/02-ECMAScript+/00-ecmascript.html"
    },
    'next': {
        "text": "TypeScript",
        "link": "articles/02-ECMAScript+/02-typescript.html"
    },
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'sidebar': [
        {
            "text": "ESMAScript+ 面试宝典",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "text": "前端大事记",
            "link": "articles/es-timeline.html",
            "pagePath": "articles/es-timeline.md"
        },
        {
            "text": "职业 & 成长",
            "link": "articles/00-Profession/index.html",
            "pagePath": "articles/00-Profession/README.md"
        },
        {
            "link": "articles/01-Programming/index.html",
            "title": "编程基础",
            "children": [
                {
                    "text": "编程语言",
                    "link": "articles/01-Programming/00-language.html",
                    "pagePath": "articles/01-Programming/00-language.md"
                },
                {
                    "text": "操作系统",
                    "link": "articles/01-Programming/01-operating-system.html",
                    "pagePath": "articles/01-Programming/01-operating-system.md"
                },
                {
                    "text": "算法",
                    "link": "articles/01-Programming/02-algorithms.html",
                    "pagePath": "articles/01-Programming/02-algorithms.md"
                },
                {
                    "text": "设计模式",
                    "link": "articles/01-Programming/03-design-patterns.html",
                    "pagePath": "articles/01-Programming/03-design-patterns.md"
                },
                {
                    "text": "工程化",
                    "link": "articles/01-Programming/04-software-engineering.html",
                    "pagePath": "articles/01-Programming/04-software-engineering.md"
                },
                {
                    "text": "安全",
                    "link": "articles/01-Programming/05-network-security.html",
                    "pagePath": "articles/01-Programming/05-network-security.md"
                },
                {
                    "text": "测试",
                    "link": "articles/01-Programming/06-software-test.html",
                    "pagePath": "articles/01-Programming/06-software-test.md"
                },
                {
                    "text": "版本控制",
                    "link": "articles/01-Programming/07-version-control.html",
                    "pagePath": "articles/01-Programming/07-version-control.md"
                }
            ],
            "text": "编程基础",
            "pagePath": "articles/01-Programming/README.md"
        },
        {
            "link": "articles/02-ECMAScript+/index.html",
            "title": "ECMAScript+",
            "children": [
                {
                    "text": "ECMAScript",
                    "link": "articles/02-ECMAScript+/00-ecmascript.html",
                    "pagePath": "articles/02-ECMAScript+/00-ecmascript.md"
                },
                {
                    "text": "JavaScript 基础知识",
                    "link": "articles/02-ECMAScript+/01-javascript.html",
                    "pagePath": "articles/02-ECMAScript+/01-javascript.md"
                },
                {
                    "text": "TypeScript",
                    "link": "articles/02-ECMAScript+/02-typescript.html",
                    "pagePath": "articles/02-ECMAScript+/02-typescript.md"
                },
                {
                    "text": "JavaScript 常见实战题",
                    "link": "articles/02-ECMAScript+/03-javascript-parctice.html",
                    "pagePath": "articles/02-ECMAScript+/03-javascript-parctice.md"
                }
            ],
            "text": "ECMAScript+",
            "pagePath": "articles/02-ECMAScript+/README.md"
        },
        {
            "link": "articles/03-HTML+CSS/index.html",
            "title": "HTML + CSS",
            "children": [
                {
                    "text": "HTML",
                    "link": "articles/03-HTML+CSS/00-html.html",
                    "pagePath": "articles/03-HTML+CSS/00-html.md"
                },
                {
                    "text": "CSS",
                    "link": "articles/03-HTML+CSS/01-css-design.html",
                    "pagePath": "articles/03-HTML+CSS/01-css-design.md"
                },
                {
                    "text": "HTML + CSS 实战",
                    "link": "articles/03-HTML+CSS/02-html-css-practice.html",
                    "pagePath": "articles/03-HTML+CSS/02-html-css-practice.md"
                }
            ],
            "text": "HTML + CSS",
            "pagePath": "articles/03-HTML+CSS/README.md"
        },
        {
            "link": "articles/04-Network+API/index.html",
            "title": "网络 + 前后端协作",
            "children": [
                {
                    "text": "网络",
                    "link": "articles/04-Network+API/00-network.html",
                    "pagePath": "articles/04-Network+API/00-network.md"
                },
                {
                    "text": "前后端协作",
                    "link": "articles/04-Network+API/01-fe-be-api.html",
                    "pagePath": "articles/04-Network+API/01-fe-be-api.md"
                },
                {
                    "text": "登录",
                    "link": "articles/04-Network+API/02-login.html",
                    "pagePath": "articles/04-Network+API/02-login.md"
                }
            ],
            "text": "网络 + 前后端协作",
            "pagePath": "articles/04-Network+API/README.md"
        },
        {
            "link": "articles/05-V8+Runtime/index.html",
            "title": "V8 + JavaScript 运行时",
            "children": [
                {
                    "text": "V8",
                    "link": "articles/05-V8+Runtime/00-v8.html",
                    "pagePath": "articles/05-V8+Runtime/00-v8.md"
                },
                {
                    "text": "Node",
                    "link": "articles/05-V8+Runtime/01-node.html",
                    "pagePath": "articles/05-V8+Runtime/01-node.md"
                },
                {
                    "text": "Deno",
                    "link": "articles/05-V8+Runtime/02-deno.html",
                    "pagePath": "articles/05-V8+Runtime/02-deno.md"
                }
            ],
            "text": "V8 + JavaScript 运行时",
            "pagePath": "articles/05-V8+Runtime/README.md"
        },
        {
            "link": "articles/06-FE+Browser/index.html",
            "title": "前端应用开发 + 浏览器",
            "children": [
                {
                    "text": "浏览器",
                    "link": "articles/06-FE+Browser/00-browser.html",
                    "pagePath": "articles/06-FE+Browser/00-browser.md"
                },
                {
                    "text": "前端",
                    "link": "articles/06-FE+Browser/01-fe-framework.html",
                    "pagePath": "articles/06-FE+Browser/01-fe-framework.md"
                },
                {
                    "text": "前端工具链",
                    "link": "articles/06-FE+Browser/02-fe-tooltain.html",
                    "pagePath": "articles/06-FE+Browser/02-fe-tooltain.md"
                },
                {
                    "text": "前端打包工具",
                    "link": "articles/06-FE+Browser/03-pack-tool.html",
                    "pagePath": "articles/06-FE+Browser/03-pack-tool.md"
                },
                {
                    "text": "移动端 Web 开发",
                    "link": "articles/06-FE+Browser/04-fe-mobile.html",
                    "pagePath": "articles/06-FE+Browser/04-fe-mobile.md"
                }
            ],
            "text": "前端应用开发 + 浏览器",
            "pagePath": "articles/06-FE+Browser/README.md"
        },
        {
            "link": "articles/07-BE+Server/index.html",
            "title": "后端应用开发 + 服务器",
            "children": [
                {
                    "text": "Linux + Nginx + 数据库",
                    "link": "articles/07-BE+Server/00-linux-nginx-database.html",
                    "pagePath": "articles/07-BE+Server/00-linux-nginx-database.md"
                },
                {
                    "text": "Node 框架",
                    "link": "articles/07-BE+Server/01-node-framework.html",
                    "pagePath": "articles/07-BE+Server/01-node-framework.md"
                }
            ],
            "text": "后端应用开发 + 服务器",
            "pagePath": "articles/07-BE+Server/README.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['undefined'] },
    'pagePath': "articles/02-ECMAScript+/01-javascript.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/02-ECMAScript+/01-javascript.html",
    'title': "JavaScript 基础知识",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>JavaScript 基础知识</h1>\n<h2 id="dom-%E5%92%8C-bom-%E6%98%AF%E4%BB%80%E4%B9%88">DOM 和 BOM 是什么？<a class="anchor" href="#dom-%E5%92%8C-bom-%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<ul>\n<li><strong>BOM 浏览器对象模型</strong>：根节点是 <code>window</code>。\n<ul>\n<li>navigator 对象：<code>appCodeName; appName; appVersion; cookieEnabled; platform; userAgent;</code>。</li>\n<li>screen 对象：<code>availHeight; availWidth; height; width; colorDepth;</code>。</li>\n<li>history 对象：<code>back; forward; go;</code>。</li>\n<li>location 对象：\n<ul>\n<li>属性：<code>hash; host; hostName; href; pathname; port; portocol; </code>。</li>\n<li>方法：<code>assign; reload; replace</code>。</li>\n</ul>\n</li>\n<li>document 对象：\n<ul>\n<li>集合：<code>anchors; images; links; forms;</code>。</li>\n<li>属性：<code>cookie; domain; referrer; title; URL;</code>。</li>\n<li>方法：<code>open; close; write; writeIn;</code>。</li>\n</ul>\n</li>\n<li>窗口控制：<code>moveBy; moveTo; resizeBy; resizeTo; scrollBy; scrollTo;</code>。</li>\n<li>焦点控制：<code>focus; blur;</code>。</li>\n<li>打开关闭窗口：<code>open; close;</code></li>\n<li>定时器：<code>setTimeout; clearTimeout; setInterval; clearInterval</code>。</li>\n<li>对话框：<code>alert; confirm; prompt;</code>。</li>\n<li>属性：\n<ul>\n<li>状态栏：<code>defaultStatus; status</code>。</li>\n<li>窗口位置 - IE：<code>screenLeft; screenTop;</code>。</li>\n<li>窗口位置 - !IE：<code>screenX; screenY; pageXOffset; pageYOffset;</code>。</li>\n<li>窗口位置 - FF：<code>innerHeight; innerWidth; outerHeight; outerWidth;</code>。</li>\n<li>其它：<code>opener; close; name; self;</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>DOM 文档对象模型</strong>：W3C 标准。根节点是 <code>window.document</code>。\n<ul>\n<li>获取节点：\n<ul>\n<li>document：<code>getElementById; getElementsByName; getElementsByTagName; </code>。</li>\n<li>节点指针：<code>firstChild; lastChild; childNodes; previousSibling; nextSibling; parentNode;</code>。</li>\n</ul>\n</li>\n<li>节点操作：\n<ul>\n<li>创建节点：<code>createElement; createAttribute; createTextNode;</code>。</li>\n<li>插入节点：<code>appendChild; insertBefore;</code>。</li>\n<li>替换节点：<code>replaceChild;</code>。</li>\n<li>复制节点：<code>cloneNode;</code>。</li>\n<li>删除节点：<code>removeChild;</code>。</li>\n</ul>\n</li>\n<li>属性操作（获取/设置/删除）：<code>getAttribute; setAttribute; removeAttribute</code>。</li>\n<li>文本操作：<code>insertData; appendData, deleteData, replaceData; spliceData; substring;</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id="new-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">new 的原理与实现？<a class="anchor" href="#new-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">§</a></h2>\n<ul>\n<li>创建一个新的空对象</li>\n<li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>如果这个函数有返回值，则返回；否则，就会默认返回新对象。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">job</span> <span class="token operator">=</span> job<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个空对象</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 获取构造函数</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 设置空对象的原型</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token comment">// 绑定 this</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 返回新对象</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">\'Front-end developer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// var person = new Person(\'Nicholas\', 29, \'Front-end developer\'); </span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// Nicholas</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Nicholas</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>\n</code></pre>\n<h2 id="callapplybind-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">call()、apply()、bind() 的原理与实现？<a class="anchor" href="#callapplybind-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">§</a></h2>\n<blockquote>\n<p>参考：<a href="https://www.zhihu.com/column/c_1155423857010659328">进击的前端面试 - 知乎专栏</a></p>\n</blockquote>\n<ul>\n<li>call：【显示调用】传入多个参数，第一个参数是 this 的指向，之后的参数都是函数的参数。</li>\n<li>call 做了三件事：<code>person.fullName.call(person1, &quot;Hello, &quot;);</code>。\n<ul>\n<li>显示地改变 this 的指向为第一个参数。</li>\n<li>从 call 的第二个参数开始，都传递给调用 call 的函数中。</li>\n<li>不改变调用函数本身内部，调用函数不使用 call 时会和 call 不再有关系。</li>\n</ul>\n</li>\n<li><code>foo.call(this, arg1, arg2, arg3) == foo.apply(this, arguments) == this.foo(arg1, arg2, arg3);</code>。</li>\n<li>call 的使用场景：\n<ul>\n<li>让类数组使用数组的方法：<code>Array.prototype.slice.call(arguments)</code></li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myOwnCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span><span class="token punctuation">;</span>\n  <span class="token comment">// 给想让 this 指向的对象临时添加一个 fn，while 来确保此 fn 是独特的。</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token comment">// 使用 eval 而不使用新特性 …Array.from(arguments).slice(1) 时。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arguments["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 由于不能改变想让 this 指向的对象，再次删掉临时建立的属性。</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>txt <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">firstName</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">lastName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">"Doe"</span>\n<span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\nperson<span class="token punctuation">.</span><span class="token property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">myOwnCall</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\n</code></pre>\n<ul>\n<li>apply：【显示调用】传入两个参数，第一个参数是 this 的指向，第二个参数是函数参数组成的数组。\n<ul>\n<li>在 ES6 解构赋值之前，可以用 apply 给函数传入参数数组。</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// myOwnApply，相比 myOwnCall，只需要注意一下，第二个参数是否存在就可以。</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myOwnApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n \n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arr["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>bind：【隐式调用】创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被 bind 的第一个参数指定，其余的参数将作为新函数的参数供调用时使用。</li>\n<li>bind 做了四件事：<code>greeting.bind(obj, \'the world\')(\'JS\')</code>。\n<ul>\n<li>改变调用者中 this 的指向，之后返回一个函数。</li>\n<li>调用 bind 时，除了第一个代表 this 的指向，还能传递参数给调用者。</li>\n<li>调用生成的“绑定函数”时，再传入剩余参数。</li>\n<li>生成的“绑定函数”也可以使用 new 运算符构造，提供的 this 值会被忽略，但前置参数仍会提供给模拟函数。</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this 保存在 thatFunc，否则 this 的指向会根据场景的不同而改变。</span>\n  <span class="token comment">// 取出 thatArg。</span>\n  <span class="token keyword">var</span> thatFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      thatArg <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 获取除第一个外的参数列表，继续传入到返回的参数中。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 确保 thatFunc 是个函数，否则报错。</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thatFunc <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Function.prototype.bind - \'</span> <span class="token operator">+</span>\n      <span class="token string">\'what is trying to be bound is not callable\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 由于 bind 不是立即执行的，所以要返回一个函数。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fBound</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用了 apply 改变指向</span>\n    <span class="token comment">// 如果是在 new 关键字调用情况下，会指向 newObj，而 newObj 就是 fBound 的实例，this instanceof fBound 就是true，我们不再使用 thatArg 作为 greeting 的 this，而是直接使用 newObj 作为 greeting 的 this。</span>\n    <span class="token comment">// 而当做普通函数调用的时候，this instanceof fBound 就是 false，greeting 中的 this 依然指向 thatArg。</span>\n    <span class="token keyword control-flow">return</span> thatFunc<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fBound</span>\n      <span class="token operator">?</span> <span class="token keyword">this</span>·\n      <span class="token operator">:</span> thatArg<span class="token punctuation">,</span>\n      <span class="token comment">// 拼凑</span>\n      args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 中间变量 fNOP 空函数，来维护原型关系，并让 fBound.prototype 与 thatFunc.prototype 不再指向同一个原型函数。</span>\n  <span class="token comment">// 确保 fBound 的 prototype 修改时，greeting 的 prototype 不会被修改。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 把 fBound 的 prototype 修改为绑定函数的 prototype，这样 newObj 就可以“继承”自 greeting 了。</span>\n    fNOP<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  fBound<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> fBound<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"Smiley"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">\'greetingValue\'</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" in "</span><span class="token operator">+</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// var objGreeting = greeting.bind(obj, \'the world\');</span>\n<span class="token keyword">var</span> objGreeting <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token method function property-access">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'the world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">objGreeting</span><span class="token punctuation">(</span><span class="token string">\'JS\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Welcome Smiley to the world in JS</span>\n</code></pre>\n<h2 id="promise-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">Promise 的原理与实现？<a class="anchor" href="#promise-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">§</a></h2>\n<h2 id="%E9%97%AD%E5%8C%85%E5%92%8C-iife-%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E6%88%98">闭包和 IIFE 的概念与实战？<a class="anchor" href="#%E9%97%AD%E5%8C%85%E5%92%8C-iife-%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E6%88%98">§</a></h2>\n<ul>\n<li>IIFE 可以达到不暴露私有成员的目的</li>\n<li>能够在 IIFE 完成执行后任维系着内部功能的生存期。</li>\n<li>IIFE，Immediately Invoked Function Expressions，代表立即执行函数。</li>\n<li>IIFE 的外层括号不是必须的，因为 IIFE 是一个函数表达式。</li>\n</ul>\n<p>闭包，closure，概念最早提出在 1964 年，1975 年最早实现，是函数和声明该函数的词法环境的组合。词法作用域中使用的域，是变量在代码中声明的位置所决定的。</p>\n<p>闭包就是能够读取其他函数内部变量的函数。</p>\n<p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。另一方面，在函数外部自然无法读取函数内的局部变量。本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<ul>\n<li>为什么使用闭包：\n<ul>\n<li>利用闭包实现数据私有化或模拟私有方法，这个方式也称为模块模式。</li>\n<li>部分参数函数柯里化。</li>\n</ul>\n</li>\n<li>如何从外部读取局部变量？\n<ul>\n<li>那就是在函数的内部，再定义一个函数。这就是 JavaScript 语言特有的&quot;链式作用域&quot;结构(chain scop)，子对象会一级一级地向上寻找所有父对象的变量。</li>\n</ul>\n</li>\n<li>使用闭包的注意点\n<ul>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>\n<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E5%BE%85%E5%81%9A">待做<a class="anchor" href="#%E5%BE%85%E5%81%9A">§</a></h2>\n<ul>\n<li>DOM 冒泡机制</li>\n</ul>\n<ul>\n<li>let、const、var 区别及变量提升</li>\n<li>隐式类型转换、事件代理</li>\n<li>setTimeout、setInterval 与 requestAnimationFrame</li>\n<li>作用域链与执行上下文</li>\n<li>异步原理及其发展史</li>\n<li>typeof、instanceof</li>\n</ul>\n<blockquote>\n<p>宏任务、微任务</p>\n</blockquote>\n<p>• 宏任务\n• 分类：setTimeout、setInterval、requestAnimationFrame、DOM 事件回调、Ajax 回调\n• 宏任务队列：第一个宏任务队列中，只有一个任务：执行主线程 js 代码；可以有多个宏任务队列；每次准备取出第一个宏任务执行前，都要将所有的微任务一个一个取出来执行\n• 微任务\n• 分类new Promise().then(这个回调)、process.nextTick、mutation 回调\n• 微任务队列：只有一个微任务队列；在上一个宏任务队列执行完成后如果有微任务队列就会执行微任务队列所有任务</p>\n<blockquote>\n<p>闭包</p>\n</blockquote>\n<p>• 密闭的容器，主要存储数据\n• 闭包是一个对象，存放数据的格式：key：value\n• 形成条件：\n• 函数嵌套\n• 内部函数引用外部函数的局部变量\n• 出现和销毁？\n• 优点：延长外部函数局部变量的生命周期\n• 缺点：容易造成内存泄漏\n• 注意：合理使用，用完销毁</p>\n<blockquote>\n<p>错误处理</p>\n</blockquote>\n<p>常见的内置错误的类型：</p>\n<ul>\n<li>Error：所有错误的父类型</li>\n<li>Reference：引用的变量不存在</li>\n<li>TypeError：数据类型不正确</li>\n<li>RangeError：数据值不在其所允许的范围内</li>\n<li>SyntaxError：语法错误</li>\n<li>......</li>\n</ul>\n<p>错误处理：</p>\n<ul>\n<li>try catch</li>\n<li>throw error</li>\n</ul>\n<p>错误对象</p>\n<ul>\n<li>message 属性：错误相关信息</li>\n<li>stack 属性：函数调用栈记录信息</li>\n</ul>\n<h2 id="%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B---object">基础类型 - Object<a class="anchor" href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B---object">§</a></h2>\n<h2 id="%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84---%E6%95%B0%E7%BB%84">基础结构 - 数组<a class="anchor" href="#%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84---%E6%95%B0%E7%BB%84">§</a></h2>\n<ul>\n<li>\n<p>Array 静态方法：<code>Array.from(); Array.isArray(); Array.of();</code>。</p>\n</li>\n<li>\n<p>Array 原型方法：</p>\n<ul>\n<li><code>.concat(); .copyWithin(); .entries(); .every();</code>。</li>\n<li><code>.fill(); .filter(); .find(); .findIndex(); .flat(); .flatMap(); .forEach();</code>。</li>\n<li><code>.includes(); .indexOf(); .join(); .keys(); .lastIndexOf(); .map(); .pop(); .push(); </code>。</li>\n<li><code>.reduce(); .reduceRight(); .reverse(); .shift(); .slice(); .some(); .sort(); .splice(); </code>。</li>\n<li><code>.toLocaleString(); .toSource(); .toString(); .unshift(); .values();</code>。</li>\n<li><code>Array.prototype[@@iterator](); get Array[@@species]</code>。</li>\n</ul>\n</li>\n<li>\n<p>Array 常见考题：</p>\n<ul>\n<li>数组拷贝。</li>\n<li>数组展开。</li>\n<li>用 reduce 实现 map 的功能</li>\n<li>类数组转化成数组的方法</li>\n<li>实现数组 flatten</li>\n</ul>\n</li>\n<li>\n<p>Object 常见考题：</p>\n<ul>\n<li>深拷贝、浅拷贝</li>\n<li>如何判断一个对象是不是空对象？</li>\n</ul>\n</li>\n<li>\n<p>类数组和数组的互相转换？</p>\n</li>\n<li>\n<p>Number &amp; BigInt 常见考题：</p>\n<ul>\n<li>大数操作</li>\n<li>0.1+0.2 == 0.3？原因？</li>\n</ul>\n</li>\n<li>\n<p>链式调用：add(2, 5)，add(2)(5)，add(1)(1)(5) 的结果都为 7</p>\n</li>\n</ul>\n<h2 id="%E7%89%B9%E6%AE%8A%E5%85%B3%E9%94%AE%E5%AD%97">特殊关键字<a class="anchor" href="#%E7%89%B9%E6%AE%8A%E5%85%B3%E9%94%AE%E5%AD%97">§</a></h2>\n<ul>\n<li>NaN == NaN，null == undefined</li>\n<li>arguments 的使用</li>\n<li>实现 stringify 序列化函数</li>\n</ul>\n<h2 id="%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E5%87%BD%E6%95%B0%E5%BC%8F">面向对象 &amp; 函数式<a class="anchor" href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E5%87%BD%E6%95%B0%E5%BC%8F">§</a></h2>\n<ul>\n<li>JavaScript 继承方式的实现方案？</li>\n<li>实现柯里化</li>\n<li>function a () {} 和 var a = function () {} 区别、变量提升</li>\n</ul>\n<h2 id="%E5%BA%94%E7%94%A8%E7%B1%BB">应用类<a class="anchor" href="#%E5%BA%94%E7%94%A8%E7%B1%BB">§</a></h2>\n<ul>\n<li>防抖、节流函数</li>\n<li>setTimeout、promise 的使用</li>\n<li>function request(urls, maxNumber, callback) 要求编写函数实现，根据urls数组内的url地址进行并发网络请求，最大并发数maxNumber,当所有请求完毕后调用callback函数(已知请求网络的方法可以使用fetch api)</li>\n<li>getUrlParams(url,key)</li>\n</ul>\n<h2 id="%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A-mapfilterreduce-%E5%AE%9E%E7%8E%B0">高阶函数的原理及 map/filter/reduce 实现？<a class="anchor" href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A-mapfilterreduce-%E5%AE%9E%E7%8E%B0">§</a></h2>\n<p>高阶函数是至少满足下列一个条件的函数：</p>\n<ul>\n<li>接受一个或多个函数作为输入</li>\n<li>输出一个函数</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">myMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'spray\'</span><span class="token punctuation">,</span> <span class="token string">\'limit\'</span><span class="token punctuation">,</span> <span class="token string">\'elite\'</span><span class="token punctuation">,</span> <span class="token string">\'exuberant\'</span><span class="token punctuation">,</span> <span class="token string">\'destruction\'</span><span class="token punctuation">,</span> <span class="token string">\'present\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">myFilter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> accum <span class="token operator">=</span> init<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    accum <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>accum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> accum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">myReduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0">函数柯里化及其实现？<a class="anchor" href="#%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0">§</a></h2>\n<p>柯里化是把接受多个参数的函数变换成接受一个单一参数的函数，并且返回接受余下参数的新函数的技术。<code>sum(2, 3); sum(2)(3);</code>。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> finalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 自动检测参数是否传递完毕</span>\n<span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token keyword">function</span> <span class="token function">currify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">>=</span> fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">?</span>\n      fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span>\n    currify<span class="token punctuation">.</span><span class="token method function property-access">bind</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token spread operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">数组扁平化操作？<a class="anchor" href="#%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 递归</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword control-flow">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 迭代</span>\n<span class="token keyword">function</span> <span class="token function">flatten2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 从栈里取出</span>\n    <span class="token keyword">const</span> next <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 把next扁平化，然后放入stack中</span>\n      stack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// reverse to restore input order</span>\n  <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">flatten2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// generator 异步迭代</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten3</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">yield</span> item<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n\n<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> f <span class="token keyword">of</span> <span class="token function">flatten3</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84">单线程模型是怎么样的？<a class="anchor" href="#%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84">§</a></h2>\n<h2 id="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">消息队列与事件机制是什么？<a class="anchor" href="#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<h2 id="xmlhttprequest-%E5%AE%9E%E7%8E%B0-ajax">XMLHttpRequest 实现 Ajax<a class="anchor" href="#xmlhttprequest-%E5%AE%9E%E7%8E%B0-ajax">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> fnSucc<span class="token punctuation">,</span> fnFaild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> xhttp<span class="token punctuation">;</span>\n  <span class="token comment">// 第一步：创建 XMLHttpRequest 对象</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">XMLHttpRequest</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 现代浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// IE6 等老版本浏览器</span>\n      xhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 第四步：处理响应</span>\n  xhttp<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">readyState</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fnSucc</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fnFaild<span class="token punctuation">)</span> <span class="token function">fnFaild</span><span class="token punctuation">(</span>xhttp<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> \n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第二步：初始化 XMLHttpRequest 方法</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">\'GET\'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 第三步：XMLHttpRequest 向服务器发送请求</span>\n  xhttp<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">\'/smileyFace\'</span><span class="token punctuation">,</span> mySuccessFunc<span class="token punctuation">,</span> myFailFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE">怎么理解原型链？<a class="anchor" href="#%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">怎么理解作用域链？<a class="anchor" href="#%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">§</a></h2>\n<h2 id="%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0">节流和防抖怎么实现？<a class="anchor" href="#%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/87591677">https://zhuanlan.zhihu.com/p/87591677</a></span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  throttled<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/86426949">https://zhuanlan.zhihu.com/p/86426949</a></span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  debounced<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="javascript-%E5%86%85%E7%BD%AE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E4%BA%9B">JavaScript 内置全局对象有哪些？<a class="anchor" href="#javascript-%E5%86%85%E7%BD%AE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E4%BA%9B">§</a></h2>\n<p>没有 Web 浏览器宿主环境的条件下，对于任何 JavaScript 程序，在程序开始之前，JavaScript 解释器都会初始化一个全局对象供程序使用，通过使用该 JavaScript 全局对象，可以访问所有预定义的全局属性、全局普通函数、全局构造函数和全局对象。这些预定义的全局 XX 都是“JS全局对象”的属性。此“JS全局对象”没有名称，可以在全局作用域内使用 this 关键字或引用“JavaScript 全局对象”。</p>\n<ul>\n<li>基本对象\n<ul>\n<li>内置异常：EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIErro</li>\n<li>Object、Function、Boolean</li>\n</ul>\n</li>\n<li>反射：Proxy、Reflect</li>\n<li>控制对象：Generator、GeneratorFunction、Iterable、Promise</li>\n<li>数值和时间：Date、Math、Number</li>\n<li>文本处理：RegExp、String</li>\n<li>结构化数据：ArrayBuffer、DataView、JSON</li>\n<li>键值对集合：Map、Set、WeakMap、WeakSet</li>\n<li>索引集合：Array、TypedArray：Float32Array、Float64Array、Int16Array、Int32Array、Int8Array、Uint16Array、Uint32Array、Uint8Array、Uint8ClampedArray</li>\n<li>全局对象\n<ul>\n<li>全局对象的值属性：Infinity、NaN、undefined</li>\n<li>全局对象的其它属性：JSON、Math、Reflect</li>\n<li>全局对象的构造器属性：Array、ArrayBuffer、Boolean、DataView、Date、Error、EvalError、Float32Array、Float64Array、Function、Int16Array、Int32Array、Int8Array、Map、Number、Object、Promise、Proxy、RangeError、ReferenceError、RegExp、Set、String、Symbol、SyntaxError、TypeError、Uint16Array、Uint32Array、Uint8Array、Uint8ClampedArray、URIError、WeakMap、WeakSet</li>\n</ul>\n</li>\n</ul>\n<p>Web 浏览器这个宿主环境中特有的 JavaScript 全局对象为“window 全局对象”，“window 全局对象” 提供了与当前窗口、页面有关的诸多属性与方法。除了这些与浏览器有关的全局属性和方法，window 对象还封装了“JavaScript 内置全局对象”，并向外暴露“JavaScript 内置全局对象的属性与接口”。因此，当进行浏览器端 JavaScript 编程时，只需关心“window 全局对象”即可。</p>\n<h2 id="json-%E6%98%AF%E4%BB%80%E4%B9%88">JSON 是什么？<a class="anchor" href="#json-%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<ul>\n<li>\n<p>JSON 对象包含两个方法：</p>\n<ul>\n<li>用于解析 JavaScript Object Notation  (JSON) 的 parse() 方法</li>\n<li>以及将对象/值转换为 JSON 字符串的 stringify() 方法。</li>\n<li>除了这两个方法, JSON 这个对象本身并没有其他作用，也不能被调用或者作为构造函数调用。</li>\n<li>把数据结构或者对象转换成某种格式的过程称为「序列化」</li>\n<li>而将序列化过程的结果反向转换回某种数据结构或对象的过程称为「反序列化」。</li>\n</ul>\n</li>\n<li>\n<p>JSON 的本质</p>\n<ul>\n<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>\n<li>JSON 是轻量级的文本数据交换格式</li>\n<li>JSON 独立于语言，JSON 解析器和 JSON 库支持许多不同的编程语言。</li>\n<li>JSON 具有自我描述性，更易理解</li>\n</ul>\n</li>\n<li>\n<p>JSON 风格指南：</p>\n<ul>\n<li>所有的属性名必须在双引号内。</li>\n<li>JSON对象中不包含注释。</li>\n<li>JSON中的数据元素应以扁平化方式呈现。不能为了方便而将数据任意分组。</li>\n<li>选择有意义的属性名。</li>\n</ul>\n<ul>\n<li>\n<ul>\n<li>属性名应该是具有定义语义的有意义的名称。</li>\n<li>属性名必须是驼峰式的，ASCII 码字符串。</li>\n<li>首字符必须是字母，下划线(_)或美元符号($)。</li>\n<li>随后的其他字符可以是字母，数字，下划线(_)或美元符号($)。</li>\n<li>应该避免使用 Javascript 中的保留关键字</li>\n</ul>\n</li>\n<li>\n<p>在 JSON Map 中键名可以使用任意 Unicode 字符。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>JS 常见类型 与 JSON 的区别：</p>\n<table>\n<thead>\n<tr>\n<th>JavaScript类型</th>\n<th>JSON 的不同点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>对象和数组</td>\n<td>属性名称必须是双引号括起来的字符串；最后一个属性后不能有逗号。</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>禁止出现前导零（ JSON.stringify 方法自动忽略前导零，而在 JSON.parse 方法中将会抛出 SyntaxError）；如果有小数点, 则后面至少跟着一位数字。</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>只有有限的一些字符可能会被转义；禁止某些控制字符； Unicode 行分隔符 （U+2028）和段分隔符 （U+2029）被允许 ; 字符串必须用双引号括起来。请参考下面的示例，可以看到 JSON.parse() 能够正常解析，但将其当作JavaScript解析时会抛出 SyntaxError 错误：</td>\n</tr>\n</tbody>\n</table>\n<pre class="language-autoit"><code class="language-autoit">let code <span class="token operator">=</span> <span class="token string">\'"\u2028\u2029"\'</span><span class="token comment">;</span>\nJSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token comment">;  // 正常</span>\n<span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token comment">;  // 错误</span>\n</code></pre>\n<ul>\n<li>JSON.parse()：解析 JSON 字符串并返回对应的值，可以额外传入一个转换函数，用来将生成的值和其属性, 在返回之前进行某些修改。</li>\n<li>JSON.stringify()：返回与指定值对应的JSON字符串，可以通过额外的参数, 控制仅包含某些属性, 或者以自定义方法来替换某些 key 对应的属性值。</li>\n<li>JSON Polyfill：JSON 对象可能不被老版本的浏览器支持。可以将下面的代码放到JS脚本最开始的位置，这样就可以在没有原生支持 JSON 对象的浏览器（如IE6）中使用 JSON 对象。</li>\n</ul>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-javascript-%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">什么是 JavaScript 关联数组？<a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-javascript-%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">§</a></h2>\n<blockquote>\n<p>其它多数语言里，数组分为索引数组和关联数组，索引数组又分为一维数组、二维数组和多维数组。</p>\n<p>引用：“JavaScript 里面没有关联数组和索引数组这两种不同的区分，一切对象都是键值对，数组也是对象，数组也可以看作是键值对。”</p>\n<p>自我感悟，存疑：JavaScript 还是有索引数组和关联数组的微小差异。索引数组和 length 属性直接挂钩，关联数组其实访问的是数组上的属性及其值，length 一般都是 0(没有真正的数据内容)。</p>\n</blockquote>\n<p>在计算机科学中，关联数组（英语：Associative Array），又称映射（Map）、字典（Dictionary）是一个抽象的数据结构，它包含着类似于（键，值）的有序对。一个关联数组中的有序对可以重复（如C中的 multimap）也可以不重复（如 C 中的 map）。这种数据结构包含以下几种常见的操作：</p>\n<ul>\n<li>向关联数组添加配对</li>\n<li>从关联数组内删除配对</li>\n<li>修改关联数组内的配对</li>\n<li>根据已知的键寻找配对</li>\n</ul>\n<blockquote>\n<p>字典问题是设计一种能够具备关联数组特性的数据结构。解决字典问题的常用方法，是利用散列表，但有些情况下，也可以直接使用二叉查找树或其他结构。</p>\n<p>许多程序设计语言内置基本的数据类型，提供对关联数组的支持。而内容定址存储器则是硬件层面上实现对关联数组的支持。</p>\n</blockquote>\n<p>属性值和键值的异同</p>\n<ul>\n<li>属性和键值不一样，给数组新增一个属性，其依然为数组，length 不变，新增的被读取时将是属性值，而非键值。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个数组</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为3</span>\n\na<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xiaoming"</span><span class="token punctuation">;</span> <span class="token comment">// 我们再给它赋值，这是给 a 数组增加了一个属性叫 name，而不是在数组里添加数据。</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, aaa: 1]，a 依然是数组</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果还是为 3</span>\n\na<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, aaa: 1]，a 依然是数组</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为4</span>\n</code></pre>\n<ul>\n<li>以下两种写法效果是一样的，但 j2 符合 JSON 风格，当 JSON 对象作为 Map(映射、关联数组) 时使用。\n<ul>\n<li>JSON 对象和 JSON Map 在运行时看起来是一样的；这个特性与 API 设计相关。当 JSON 对象被当作 Map 使用时，API 文件应当做出说明。</li>\n<li>Map 的键名不一定要遵循属性名称的命名准则。键名可以包含任意的 Unicode 字符。客户端可使用 Map 熟悉的方括号来访问这些属性。</li>\n</ul>\n</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> j1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'j1\'</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> j2 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"j2"</span><span class="token punctuation">,</span>\n    <span class="token string">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>\n    <span class="token string">"fun"</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>遍历关联数组</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>  \n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"键:"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"值:"</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre>\n<h5 id="%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84%E5%92%8C%E7%B4%A2%E5%BC%95%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98">关联数组和索引数组的遍历效率问题<a class="anchor" href="#%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84%E5%92%8C%E7%B4%A2%E5%BC%95%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98">§</a></h5>\n<p>遍历赋值以下数组时，第一次耗费时间差不多，浏览器默认优化之后，arr2 作为 Array 而非 Object 存取速度更快。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">50000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">如何区分 Object 和 Array<a class="anchor" href="#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">§</a></h2>\n<ul>\n<li>利用 toString() 方法</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayOne</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Array]"</span>\n<span class="token punctuation">}</span>  \n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"对象的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"数组的结果："</span><span class="token operator">+</span><span class="token function">isArrayOne</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>利用 isArray，使用 Javascript 1.8.5(ECMAScript 5)，变量名字.isArray( ) 可以实现这个目的，前提是支持这一函数。其实 isArray() 就是利用 toString() 方法的封装使用。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//obj 是待检测的对象，如果返回 true 则为数组</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n     <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"[object Array]"</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre>\n<ul>\n<li>通过 instanceof 运算符来判断(instanceof运算符左边是子对象，即待测对象，右边是父构造函数，这里是 Array)。instance 实例：凡是用 new 构造函数创建出的对象，都称为是构造函数的实例。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"k1"</span><span class="token operator">:</span><span class="token string">"v1"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof处理对象的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Instanceof处理数组的结果："</span><span class="token operator">+</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li>使用 isPrototypeOf() 函数检测一个对象是否是 Array 的原型，或处于原型链中。不但可检测直接父对象，还可检测整个原型链上的所有父对象。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// true 表示是数组，false 不是数组</span>\n</code></pre>\n<ul>\n<li>利用构造函数 constructor</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> t2 <span class="token operator">=</span> t1<span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">==</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>使用 typeof + arr.concat 结合判断，局限性在于如果开发者定义了 concat 属性，便会引起冲突</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArrayFour</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token property-access">concat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This is Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>  \n            <span class="token keyword control-flow">return</span> <span class="token string">"This Not Array"</span><span class="token punctuation">;</span>  \n        <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  \n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'k\'</span><span class="token operator">:</span><span class="token string">\'v\'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">isArrayFour</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84">如何遍历对象和数组<a class="anchor" href="#%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84">§</a></h2>\n<ul>\n<li>对象遍历\n<ul>\n<li>for in 循环：<code>for (var property in obj) { console.log(property); }</code>。但这会遍历到它的继承属性，在使用前需要加入 <code>obj.hasOwnProperty(property)</code> 检查。</li>\n<li>Object.keys()：<code>Object.keys(obj).forEach(function (property) { ... })</code>。</li>\n<li>Object.getOwnPropertyNames()：<code>Object.getOwnPropertyNames(obj).forEach(function (property) { ... })</code>。Object.getOwnPropertyNames() 方法返回一个由指定对象的所有自身属性的属性名(包括不可枚举属性但不包括 Symbol 值作为名称的属性)组成的数组。</li>\n</ul>\n</li>\n<li>数组遍历\n<ul>\n<li>for loop：<code>for (var i = 0; i &lt; arr.length; i++)</code>。这里的常见错误是 var 是函数作用域而不是块级作用域。ES2015 引入了块级作用域 let，建议使用。</li>\n<li>forEach：<code>arr.forEach(function (el, index) { ... })</code>。这个语句结构有时会更精简，不必使用 index。还有 every 和 some 方法可以提前终止遍历。</li>\n</ul>\n</li>\n</ul>\n<h2 id="%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D">浅拷贝与深拷贝<a class="anchor" href="#%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D">§</a></h2>\n<ul>\n<li>数组浅拷贝</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    b <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre>\n<ul>\n<li>数组深拷贝</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cloneObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tempObj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">\'Object\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">cloneObj</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        \n        tempObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword control-flow">return</span> tempObj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> myCountry <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">\'China\'</span><span class="token punctuation">,</span>\n    birth<span class="token operator">:</span> <span class="token number">1949</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> country <span class="token operator">=</span> <span class="token function">cloneObj</span><span class="token punctuation">(</span>myCountry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>country <span class="token operator">===</span> myCountry<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre>\n<h2 id="javascript-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">JavaScript 事件机制<a class="anchor" href="#javascript-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">§</a></h2>\n<blockquote>\n<p>事件冒泡、事件捕获和事件委托</p>\n</blockquote>\n<p><strong>事件流</strong>：</p>\n<ul>\n<li>\n<p>事件流被分为三个阶段(15)捕获过程、(56)目标过程、(6~10)冒泡过程。</p>\n</li>\n<li>\n<p>IE 提出的是冒泡流，而网景提出的是捕获流，后来在 W3C 组织的统一之下，JS 支持了冒泡流和捕获流，但是目前低版本的 IE 浏览器还是只能支持冒泡流(IE6, IE7, IE8 均只支持冒泡流)，所以为了能够兼容更多的浏览器，建议大家使用冒泡流。</p>\n</li>\n<li>\n<p>从事件传播的过程能够看出来，当点击鼠标后，会先发生事件的捕获</p>\n<ul>\n<li>捕获阶段：首先 window 会获捕获到事件，之后 document、documentElement、body 会捕获到，再之后就是在 body 中 DOM 元素一层一层的捕获到事件，有 wrapDiv、innerP。\n*目标阶段：真正点击的元素textSpan的事件发生了两次，因为在上面的JavaScript代码中，textSapn既在捕获阶段绑定了事件，又在冒泡阶段绑定了事件，所以发生了两次。但是这里有一点是需要注意，在目标阶段并不一定先发生在捕获阶段所绑定的事件，而是先绑定的事件发生，一会会解释一下。</li>\n<li>冒泡阶段：会和捕获阶段相反的步骤将事件一步一步的冒泡到window</li>\n</ul>\n</li>\n</ul>\n<p><strong>JavaScript 事件冒泡</strong>：</p>\n<ul>\n<li>当触发子元素时，事件会沿着 DOM 向上冒泡。事件冒泡是实现事件委托的原理。阻止冒泡示例：</li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">var btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'btn\'</span><span class="token punctuation">)</span>\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> function <span class="token punctuation">(</span>event<span class="token punctuation">)</span> {\n    <span class="token operator">/</span><span class="token operator">/</span> event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 阻止默认行为\n    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 阻止冒泡\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'clicked\'</span><span class="token punctuation">)</span>\n}<span class="token punctuation">)</span>\n</code></pre>\n<p><strong>JavaScript 事件委托(事件代理)</strong>：</p>\n<p>事件委托是将事件监听器添加到父元素，而不是每个子元素单独设置事件监听器。当触发子元素时，事件会冒泡到父元素，监听器就会触发，这种技术的好处如下。</p>\n<ul>\n<li>内存占用减少，因为只需要一个父元素的事件处理程序，而不必为每个后代都添加事件处理程序。</li>\n<li>无需从已删除的元素中解绑处理程序，也不许将处理程序绑定到新元素上。</li>\n</ul>\n<p>示例目标：为 div 下的每个 a 标签绑定点击事件：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> id<span class="token operator">=</span><span class="token string">"a1"</span><span class="token operator">></span>a1<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a2<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a3<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>a4<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n<span class="token operator">&lt;</span>button<span class="token operator">></span>点击增加一个 a 标签<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n</code></pre>\n<p>示例原理：监听 div 下的事件触发点是不是 a 标签：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这样可以实现重载</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        fn <span class="token operator">=</span> selector\n        selector <span class="token operator">=</span> <span class="token keyword null nil">null</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 绑定事件</span>\n    elem<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> target\n        <span class="token comment">// 有 selector 说明需要做事件代理</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取触发事件的元素，即 e.target</span>\n            target <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">target</span>\n            <span class="token comment">// 看是否符合 selector 这个条件</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token method function property-access">matches</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                fn<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 无 selector，说明不需要事件代理</span>\n            <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>使用示例：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 使用代理 bindEvent 多一个 \'a\' 参数</span>\n<span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span>\n<span class="token function">bindEvent</span><span class="token punctuation">(</span>div1<span class="token punctuation">,</span> <span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 不使用代理</span>\n<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'a1\'</span><span class="token punctuation">)</span>\n<span class="token function">bindEvent</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p><strong>JavaScript 事件循环</strong>：</p>\n<p>事件循环是一个单线程循环，用于监视调用堆栈并检查是否有工作即将在任务队列中完成。如果调用堆栈为空并且任务队列中有回调函数，则将回调函数出队并推送到调用堆栈中执行。</p>\n<ul>\n<li>JavaScript 分为同步任务和异步任务</li>\n<li>同步任务都在主线程上执行，形成一个执行栈</li>\n<li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n<li>一旦执行栈中的所有同步任务执行完毕，此时 JavaScript 引擎空闲，系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n</ul>\n<h2 id="%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1">宏任务与微任务<a class="anchor" href="#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1">§</a></h2>\n<p>JavaScript 中分为两种任务类型：macrotask 和 microtask，在 ECMAScript 中，microtask 称为 jobs，macrotask 可称为 task。</p>\n<ul>\n<li>\n<p>macrotask 宏任务，可以理解是每次执行栈执行的代码就是一个宏任务，包括每次从事件队列中获取一个事件回调并放到执行栈中执行</p>\n</li>\n<li>\n<ul>\n<li>每一个 task 会从头到尾将这个任务执行完毕，不会执行其它</li>\n<li>浏览器为了能够使得 JavaScript 内部 task 与 DOM 任务能够有序的执行，会在一个 task 执行结束后，在下一个 task 执行开始前，对页面进行重新渲染。</li>\n</ul>\n</li>\n<li>\n<p>microtask 微任务，可以理解是在当前 task 执行结束后立即执行的任务</p>\n</li>\n<li>\n<ul>\n<li>在当前 task 任务后，下一个 task 之前，在渲染之前</li>\n<li>所以它的响应速度相比 setTimeout(setTimeout 是 task)会更快，因为无需等渲染</li>\n<li>在某一个 macrotask 执行完后，就会将在它执行期间产生的所有 microtask 都执行完毕(在渲染前)。</li>\n</ul>\n</li>\n</ul>\n<p>分别什么场景会用到 macrotask 和 microtask？</p>\n<ul>\n<li>macrotask：主代码块，setTimeout，setInterval 等(可以看到，事件队列中的每一个事件都是一个 macrotask)</li>\n<li>microtask：Promise，process.nextTick 等</li>\n</ul>\n<blockquote>\n<p>在node环境下，process.nextTick 的优先级高于 Promise__，也就是可以简单理解为：在宏任务结束后会先执行微任务队列中的 nextTickQueue 部分，然后才会执行微任务中的 Promise 部分。</p>\n</blockquote>\n<p>从线程角度重新理解：</p>\n<ul>\n<li>macrotask 中的事件都是放在一个事件队列中的，而这个队列由事件触发线程维护</li>\n<li>microtask 中的所有微任务都是添加到微任务队列 Job Queues 中，等待当前 macrotask 执行完毕后执行，而这个队列由 JavaScript 引擎线程维护</li>\n</ul>\n<p>所以，总结下运行机制：</p>\n<ul>\n<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n<li>当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</li>\n<li>渲染完毕后，JavaScript 线程继续接管，开始下一个宏任务（从事件队列中获取）</li>\n</ul>\n<p>另外，请注意下 Promise 的 polyfill 与官方版本的区别：</p>\n<ul>\n<li>官方版本中，是标准的 microtask 形式</li>\n<li>polyfill，一般都是通过 setTimeout 模拟的，所以是 macrotask 形式</li>\n</ul>\n<blockquote>\n<p>注意，有一些浏览器执行结果不一样，因为它们可能把 microtask 当成macrotask来执行了。</p>\n</blockquote>\n<h2 id="promise-%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">Promise 机制是怎样的？<a class="anchor" href="#promise-%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h2>\n<ul>\n<li>同步函数与异步函数\n<ul>\n<li>同步函数阻塞，语句完成后，下一句才执行。</li>\n<li>异步函数不阻塞，通常接受回调作为参数，在调用异步函数后立即继续执行下一行。回调函数仅在异步操作完成且调用堆栈为空时调用。</li>\n</ul>\n</li>\n<li>Promise 是一个可能在未来某个时间产生结果的对象：操作成功的结果或失败的原因。Promise 可能处于以下三种状态之一：fulfilled、rejected、pending。用户可以对 Promise 添加回调函数来处理操作成功的结果或失败的原因。</li>\n<li>Promise 代替回调函数的优点：\n<ul>\n<li>避免可读性极差的回调地狱。</li>\n<li>使用 .then() 编写的顺序异步代码，既简单又易读。</li>\n<li>使用 Promise.all() 编写异步代码变得很容易。</li>\n</ul>\n</li>\n<li>Promise 代替回调函数的缺点：</li>\n</ul>\n<ul>\n<li>在不支持 ES2015 的旧版浏览器中，需要引入 Polyfill 才能使用。</li>\n</ul>\n<h2 id="cors-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">CORS 的实现原理？<a class="anchor" href="#cors-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">§</a></h2>\n<p>CORS 是一个 W3C 标准，全称是&quot;跨域资源共享&quot;(Cross-origin resource sharing)。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p>\n<p>基本上目前所有的浏览器都实现了 CORS 标准,其实目前几乎所有的浏览器 ajax 请求都是基于 CORS 机制的。</p>\n<p>浏览器将CORS请求分成两类：简单请求(simple request)和非简单请求(not-so-simple request)。只要同时满足以下两大条件，就属于简单请求。</p>\n<ul>\n<li>请求方法是以下三种方法之一：HEAD, GET, POST</li>\n<li>HTTP的头信息不超出以下几种字段：</li>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type(只限于三个值application/x-www-form-urlencoded、 multipart/form-data、text/plain)</li>\n</ul>\n<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>\n<h2 id="jsonp-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">JSONP 的实现原理？<a class="anchor" href="#jsonp-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">§</a></h2>\n<p>JSONP 是一种通常用于绕过 Web 浏览器中的跨域限制的方法，因为 Ajax 不允许跨域请求。JSONP 通过 <code>&lt;script&gt;</code> 标签发送跨域请求，通常使用 callback 查询参数，例如：<a href="https://example.com?callback=printData%E3%80%82%E7%84%B6%E5%90%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%86%E6%95%B0%E6%8D%AE%E5%8C%85%E8%A3%85%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA">https://example.com?callback=printData。然后服务器将数据包装在一个名为</a> printData 的函数中并将其返回客户端。</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">function</span> <span class="token function">printData</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'My name is ${data.name}\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><a class="token url-link" href="https://example.com?callback=printData">https://example.com?callback=printData</a><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n// 文件加载自 <a class="token url-link" href="https://example.com?callback=printData">https://example.com?callback=printData</a>\nprintData({ name: \'Yang shun\'} )\n</code></pre>\n<p>客户端必须在其全局范围内具有 printData 函数，并且在收到来自跨域的响应时，该函数将由客户端执行。JSONP 可能具有一些安全隐患，因此需要信任 JSONP 数据的提供者。</p>\n<h2 id="ajaxxmlhttprequest-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9">AJAX（XMLHttpRequest） 怎么使用及优缺点？<a class="anchor" href="#ajaxxmlhttprequest-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9">§</a></h2>\n<p>Ajax 是创建异步 Web 应用的一种 Web 开发技术，起源于 IE 的 Active X 控件，并以 XMLHTTPRequest API 方式提供编程接口。借助 Ajax，Web 应用可以异步(在后台)向服务器发送数据和从服务器检索数据，而不会干扰现有页面的现实和行为。现在通常将 JSON 替换为 XML，因为 JavaScript 对 JSON 由原生支持优势。</p>\n<p>优点：</p>\n<ul>\n<li>交互性更好，来自服务器的新内容可以动态更改，不许重新加载整个页面。</li>\n<li>减少与服务器的链接，因为脚本和样式只需要被请求一次。</li>\n<li>状态可以维护在一个页面上，JavaScript 变量和 DOM 状态将得到保持，因为主容器页面未被重新加载。</li>\n<li>基本上包括大部分 SPA 的优点。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>动态网页很难收藏。</li>\n<li>如果 JavaScript 已在浏览器中被禁用，则不起作用。</li>\n<li>有些网络爬虫不执行 JavaScript，也不会看到 JavaScript 加载的内容。</li>\n<li>基本上包括大部分 SPA 的缺点。</li>\n</ul>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/api"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\nxhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里的函数异步执行，可参考之前 JS 基础中的异步模块</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">readyState</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nxhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span>\n</code></pre>\n<p>xhr.readyState 的状态码说明：</p>\n<ul>\n<li>0 - (未初始化）还没有调用send()方法</li>\n<li>1 -（载入）已调用send()方法，正在发送请求</li>\n<li>2 -（载入完成）send()方法执行完成，已经接收到全部响应内容</li>\n<li>3 -（交互）正在解析响应内容</li>\n<li>4 -（完成）响应内容解析完成，可以在客户端调用了</li>\n</ul>\n<h2 id="fetch-api-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">Fetch API 怎么使用？<a class="anchor" href="#fetch-api-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">§</a></h2>\n<p>Fetch 支 持headers 定义，通过 headers 自定义可以方便地实现多种请求方法(PUT、GET、POST 等)、请求头(包括跨域)和 cache 策略等；除此之外还支持 response（返回数据）多种类型，比如支持二进制文件、字符串和 formData 等。</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'some/api/data.json\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  method<span class="token operator">:</span><span class="token string">\'POST\'</span><span class="token punctuation">,</span> <span class="token comment">// 请求类型 GET、POST</span>\n  headers<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 请求的头信息，形式为 Headers 对象或 ByteString</span>\n  body<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 请求发送的数据 blob、BufferSource、FormData、URLSearchParams(get 或 head 方法中不能包含 body)</span>\n  mode<span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 请求的模式，是否跨域等，如 cors、 no-cors 或 same-origin</span>\n  credentials<span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// cookie 的跨域策略，如 omit、same-origin 或 include</span>\n  cache<span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// 请求的 cache 模式: default、no-store、reload、no-cache、 force-cache 或 only-if-cached</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token spread operator">...</span>\n</code></pre>\n<h2 id="%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">同源策略的机制是什么？<a class="anchor" href="#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<p>同源策略可防止 JavaScript 发起跨域请求。源被定义为 URI、主机名和端口号的组合。此策略可防止页面上的恶意脚本通过该页面的文档对象模型，访问另一个网页上的敏感数据。</p>\n<h2 id="%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">客户端存储机制是怎样的？<a class="anchor" href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">§</a></h2>\n<ul>\n<li>localStorage、sessionStorage、Storage 的方法及属性：clear()、getItem()、key()、removeItem()、setItem()、constructor()、length</li>\n</ul>\n<p>Cookie、LocalStorage、SessionStorage 都是客户端以键值对存储的存储机制，并且只能将值存储为字符串。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Cookie</th>\n<th>LocalStorage</th>\n<th>SessionStorage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>由谁初始化</td>\n<td>服务器(Set-Cookie 请求头)或客户端</td>\n<td>客户端</td>\n<td>客户端</td>\n</tr>\n<tr>\n<td>过期时间</td>\n<td>手动设置</td>\n<td>永不过期</td>\n<td>当前页面关闭时</td>\n</tr>\n<tr>\n<td>在当前浏览器会话中是否保持不变</td>\n<td>取决于是否设置过期时间</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否与域名相关联</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否随着每个 HTTP 请求发送给服务器</td>\n<td>是，Cookie 会自动设置 Cookie 请求头</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>每个域名容量</td>\n<td>4kb</td>\n<td>5mb</td>\n<td>5mb</td>\n</tr>\n<tr>\n<td>访问权限</td>\n<td>任一窗口</td>\n<td>任一窗口</td>\n<td>当前页面窗口</td>\n</tr>\n</tbody>\n</table>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#dom-%E5%92%8C-bom-%E6%98%AF%E4%BB%80%E4%B9%88">DOM 和 BOM 是什么？</a></li><li><a href="#new-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">new 的原理与实现？</a></li><li><a href="#callapplybind-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">call()、apply()、bind() 的原理与实现？</a></li><li><a href="#promise-%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0">Promise 的原理与实现？</a></li><li><a href="#%E9%97%AD%E5%8C%85%E5%92%8C-iife-%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%9E%E6%88%98">闭包和 IIFE 的概念与实战？</a></li><li><a href="#%E5%BE%85%E5%81%9A">待做</a></li><li><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B---object">基础类型 - Object</a></li><li><a href="#%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84---%E6%95%B0%E7%BB%84">基础结构 - 数组</a></li><li><a href="#%E7%89%B9%E6%AE%8A%E5%85%B3%E9%94%AE%E5%AD%97">特殊关键字</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1--%E5%87%BD%E6%95%B0%E5%BC%8F">面向对象 &amp; 函数式</a></li><li><a href="#%E5%BA%94%E7%94%A8%E7%B1%BB">应用类</a></li><li><a href="#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A-mapfilterreduce-%E5%AE%9E%E7%8E%B0">高阶函数的原理及 map/filter/reduce 实现？</a></li><li><a href="#%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0">函数柯里化及其实现？</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">数组扁平化操作？</a></li><li><a href="#%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E7%9A%84">单线程模型是怎么样的？</a></li><li><a href="#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%B8%8E%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">消息队列与事件机制是什么？</a></li><li><a href="#xmlhttprequest-%E5%AE%9E%E7%8E%B0-ajax">XMLHttpRequest 实现 Ajax</a></li><li><a href="#%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE">怎么理解原型链？</a></li><li><a href="#%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">怎么理解作用域链？</a></li><li><a href="#%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0">节流和防抖怎么实现？</a></li><li><a href="#javascript-%E5%86%85%E7%BD%AE%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E4%BA%9B">JavaScript 内置全局对象有哪些？</a></li><li><a href="#json-%E6%98%AF%E4%BB%80%E4%B9%88">JSON 是什么？</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-javascript-%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">什么是 JavaScript 关联数组？</a><ol></ol></li><li><a href="#%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86-object-%E5%92%8C-array">如何区分 Object 和 Array</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84">如何遍历对象和数组</a></li><li><a href="#%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D">浅拷贝与深拷贝</a></li><li><a href="#javascript-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6">JavaScript 事件机制</a></li><li><a href="#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1">宏任务与微任务</a></li><li><a href="#promise-%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">Promise 机制是怎样的？</a></li><li><a href="#cors-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">CORS 的实现原理？</a></li><li><a href="#jsonp-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">JSONP 的实现原理？</a></li><li><a href="#ajaxxmlhttprequest-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9">AJAX（XMLHttpRequest） 怎么使用及优缺点？</a></li><li><a href="#fetch-api-%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8">Fetch API 怎么使用？</a></li><li><a href="#%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%9A%84%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88">同源策略的机制是什么？</a></li><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84">客户端存储机制是怎样的？</a></li></ol></nav>'
        } })
};
