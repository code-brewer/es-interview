import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "text": "TypeScript",
        "link": "articles/02-ECMAScript+/02-typescript.html"
    },
    'next': {
        "link": "articles/03-HTML+CSS/index.html",
        "text": "HTML + CSS"
    },
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'sidebar': [
        {
            "text": "ESMAScript+ 面试宝典",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "text": "前端大事记",
            "link": "articles/es-timeline.html",
            "pagePath": "articles/es-timeline.md"
        },
        {
            "text": "职业 & 成长",
            "link": "articles/00-Profession/index.html",
            "pagePath": "articles/00-Profession/README.md"
        },
        {
            "link": "articles/01-Programming/index.html",
            "title": "编程基础",
            "children": [
                {
                    "text": "编程语言",
                    "link": "articles/01-Programming/00-language.html",
                    "pagePath": "articles/01-Programming/00-language.md"
                },
                {
                    "text": "操作系统",
                    "link": "articles/01-Programming/01-operating-system.html",
                    "pagePath": "articles/01-Programming/01-operating-system.md"
                },
                {
                    "text": "算法",
                    "link": "articles/01-Programming/02-algorithms.html",
                    "pagePath": "articles/01-Programming/02-algorithms.md"
                },
                {
                    "text": "设计模式",
                    "link": "articles/01-Programming/03-design-patterns.html",
                    "pagePath": "articles/01-Programming/03-design-patterns.md"
                },
                {
                    "text": "工程化",
                    "link": "articles/01-Programming/04-software-engineering.html",
                    "pagePath": "articles/01-Programming/04-software-engineering.md"
                },
                {
                    "text": "安全",
                    "link": "articles/01-Programming/05-network-security.html",
                    "pagePath": "articles/01-Programming/05-network-security.md"
                },
                {
                    "text": "测试",
                    "link": "articles/01-Programming/06-software-test.html",
                    "pagePath": "articles/01-Programming/06-software-test.md"
                },
                {
                    "text": "版本控制",
                    "link": "articles/01-Programming/07-version-control.html",
                    "pagePath": "articles/01-Programming/07-version-control.md"
                }
            ],
            "text": "编程基础",
            "pagePath": "articles/01-Programming/README.md"
        },
        {
            "link": "articles/02-ECMAScript+/index.html",
            "title": "ECMAScript+",
            "children": [
                {
                    "text": "ECMAScript",
                    "link": "articles/02-ECMAScript+/00-ecmascript.html",
                    "pagePath": "articles/02-ECMAScript+/00-ecmascript.md"
                },
                {
                    "text": "JavaScript 基础知识",
                    "link": "articles/02-ECMAScript+/01-javascript.html",
                    "pagePath": "articles/02-ECMAScript+/01-javascript.md"
                },
                {
                    "text": "TypeScript",
                    "link": "articles/02-ECMAScript+/02-typescript.html",
                    "pagePath": "articles/02-ECMAScript+/02-typescript.md"
                },
                {
                    "text": "JavaScript 常见实战题",
                    "link": "articles/02-ECMAScript+/03-javascript-parctice.html",
                    "pagePath": "articles/02-ECMAScript+/03-javascript-parctice.md"
                }
            ],
            "text": "ECMAScript+",
            "pagePath": "articles/02-ECMAScript+/README.md"
        },
        {
            "link": "articles/03-HTML+CSS/index.html",
            "title": "HTML + CSS",
            "children": [
                {
                    "text": "HTML",
                    "link": "articles/03-HTML+CSS/00-html.html",
                    "pagePath": "articles/03-HTML+CSS/00-html.md"
                },
                {
                    "text": "CSS",
                    "link": "articles/03-HTML+CSS/01-css-design.html",
                    "pagePath": "articles/03-HTML+CSS/01-css-design.md"
                },
                {
                    "text": "HTML + CSS 实战",
                    "link": "articles/03-HTML+CSS/02-html-css-practice.html",
                    "pagePath": "articles/03-HTML+CSS/02-html-css-practice.md"
                }
            ],
            "text": "HTML + CSS",
            "pagePath": "articles/03-HTML+CSS/README.md"
        },
        {
            "link": "articles/04-Network+API/index.html",
            "title": "网络 + 前后端协作",
            "children": [
                {
                    "text": "网络",
                    "link": "articles/04-Network+API/00-network.html",
                    "pagePath": "articles/04-Network+API/00-network.md"
                },
                {
                    "text": "前后端协作",
                    "link": "articles/04-Network+API/01-fe-be-api.html",
                    "pagePath": "articles/04-Network+API/01-fe-be-api.md"
                },
                {
                    "text": "登录",
                    "link": "articles/04-Network+API/02-login.html",
                    "pagePath": "articles/04-Network+API/02-login.md"
                }
            ],
            "text": "网络 + 前后端协作",
            "pagePath": "articles/04-Network+API/README.md"
        },
        {
            "link": "articles/05-V8+Runtime/index.html",
            "title": "V8 + JavaScript 运行时",
            "children": [
                {
                    "text": "V8",
                    "link": "articles/05-V8+Runtime/00-v8.html",
                    "pagePath": "articles/05-V8+Runtime/00-v8.md"
                },
                {
                    "text": "Node",
                    "link": "articles/05-V8+Runtime/01-node.html",
                    "pagePath": "articles/05-V8+Runtime/01-node.md"
                },
                {
                    "text": "Deno",
                    "link": "articles/05-V8+Runtime/02-deno.html",
                    "pagePath": "articles/05-V8+Runtime/02-deno.md"
                }
            ],
            "text": "V8 + JavaScript 运行时",
            "pagePath": "articles/05-V8+Runtime/README.md"
        },
        {
            "link": "articles/06-FE+Browser/index.html",
            "title": "前端应用开发 + 浏览器",
            "children": [
                {
                    "text": "浏览器",
                    "link": "articles/06-FE+Browser/00-browser.html",
                    "pagePath": "articles/06-FE+Browser/00-browser.md"
                },
                {
                    "text": "前端",
                    "link": "articles/06-FE+Browser/01-fe-framework.html",
                    "pagePath": "articles/06-FE+Browser/01-fe-framework.md"
                },
                {
                    "text": "前端工具链",
                    "link": "articles/06-FE+Browser/02-fe-tooltain.html",
                    "pagePath": "articles/06-FE+Browser/02-fe-tooltain.md"
                },
                {
                    "text": "前端打包工具",
                    "link": "articles/06-FE+Browser/03-pack-tool.html",
                    "pagePath": "articles/06-FE+Browser/03-pack-tool.md"
                },
                {
                    "text": "移动端 Web 开发",
                    "link": "articles/06-FE+Browser/04-fe-mobile.html",
                    "pagePath": "articles/06-FE+Browser/04-fe-mobile.md"
                },
                {
                    "text": "React",
                    "link": "articles/06-FE+Browser/05-react.html",
                    "pagePath": "articles/06-FE+Browser/05-react.md"
                }
            ],
            "text": "前端应用开发 + 浏览器",
            "pagePath": "articles/06-FE+Browser/README.md"
        },
        {
            "link": "articles/07-BE+Server/index.html",
            "title": "后端应用开发 + 服务器",
            "children": [
                {
                    "text": "Linux + Nginx + 数据库",
                    "link": "articles/07-BE+Server/00-linux-nginx-database.html",
                    "pagePath": "articles/07-BE+Server/00-linux-nginx-database.md"
                },
                {
                    "text": "Node 框架",
                    "link": "articles/07-BE+Server/01-node-framework.html",
                    "pagePath": "articles/07-BE+Server/01-node-framework.md"
                }
            ],
            "text": "后端应用开发 + 服务器",
            "pagePath": "articles/07-BE+Server/README.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['undefined'] },
    'pagePath': "articles/02-ECMAScript+/03-javascript-parctice.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/02-ECMAScript+/03-javascript-parctice.html",
    'title': "JavaScript 常见实战题",
    'content': (React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>JavaScript 常见实战题</h1>\n<h2 id="%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0-add123add1-2-3">一个函数实现 add(1)(2)(3)、add(1, 2, 3)<a class="anchor" href="#%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0-add123add1-2-3">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token keyword">function</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword control-flow">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> args<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> acc <span class="token operator">+</span> next<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//will only sum first 3 arguments</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> resultFn\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">resultFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">动手实现 new<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Person</span></span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">job</span> <span class="token operator">=</span> job<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个空对象</span>\n  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token comment">// 获取构造函数</span>\n  <span class="token keyword">let</span> <span class="token maybe-class-name">Con</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 设置空对象的原型</span>\n  obj<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">=</span> <span class="token class-name">Con</span><span class="token punctuation">.</span><span class="token property-access">prototype</span>\n  <span class="token comment">// 绑定 this</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token maybe-class-name">Con</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n  <span class="token comment">// 返回新对象</span>\n  <span class="token keyword control-flow">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token maybe-class-name">Person</span><span class="token punctuation">,</span> <span class="token string">\'Nicholas\'</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token string">\'Front-end developer\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// var person = new Person(\'Nicholas\', 29, \'Front-end developer\'); </span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span> <span class="token comment">// Nicholas</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Nicholas</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token property-access">__proto__</span> <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayisarray">动手实现 Array.isArray<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayisarray">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myIsArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token keyword control-flow">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Array]\'</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96">动手实现节流和防抖？<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/87591677">https://zhuanlan.zhihu.com/p/87591677</a></span>\n<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> context<span class="token punctuation">,</span> args<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    previous <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n    result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n  <span class="token keyword">var</span> <span class="token function-variable function">throttled</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token known-class-name class-name">Date</span><span class="token punctuation">.</span><span class="token method function property-access">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">leading</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>\n      result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span><span class="token property-access">trailing</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  throttled<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> throttled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// <a class="token url-link" href="https://zhuanlan.zhihu.com/p/86426949">https://zhuanlan.zhihu.com/p/86426949</a></span>\n<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> timeout<span class="token punctuation">,</span> result<span class="token punctuation">;</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">debounced</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout<span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> result <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  debounced<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeout <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> debounced<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayprototypereduce">动手实现 Array.prototype.reduce<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayprototypereduce">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> accumulator <span class="token operator">=</span> initialValue <span class="token operator">?</span> initialValue <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> initialValue <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> _this<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> accumulator<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">myReduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  acc <span class="token operator">+=</span> val<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> acc<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">动手实现 Object.create()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function-variable function">create</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="javascript-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F">JavaScript 实现继承的多种方式<a class="anchor" href="#javascript-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F">§</a></h2>\n<p>类式继承：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 为父类添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 继承父类</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n</code></pre>\n<p>构造函数继承：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 添加共有方法</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 声明子类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\n</code></pre>\n<p>组合继承：将类式继承和构造函数继承组合在一起</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 声明父类</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span><span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    \n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 添加共有方法  </span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>     \n<span class="token comment">// 声明子类   </span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// 构造函数继承    </span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>   \n<span class="token comment">// 类式继承</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n</code></pre>\n<p>寄生组合式继承：强化的部分就是在组合继承的基础上减少一次多余的调用父类的构造函数</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Animal</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'animal\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'pig\'</span><span class="token punctuation">,</span> <span class="token string">\'cat\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Dog</span></span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token maybe-class-name">Animal</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">\'dog\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* 注意下面两行 */</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token maybe-class-name">Dog</span><span class="token punctuation">;</span>\n<span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'白色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token keyword">var</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     \ndog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">\'dog\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// "白色"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ["pig", "cat", "dog"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ["pig", "cat"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "黑色"</span>\ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  "汪汪"</span>\n</code></pre>\n<p>extends 继承：ES6</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>   \n  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">sound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   \n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   \n    <span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">color</span> <span class="token operator">=</span> color<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>   \n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'黑色\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \ndog<span class="token punctuation">.</span><span class="token method function property-access">greet</span><span class="token punctuation">(</span><span class="token string">\'汪汪\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "汪汪"</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token property-access">color</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "黑色"</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">动手实现 call()、bind()、apply()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span><span class="token punctuation">;</span>\n  <span class="token comment">// 给想让 this 指向的对象临时添加一个 fn，while 来确保此 fn 是独特的。</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token comment">// 使用 eval 而不使用新特性 …Array.from(arguments).slice(1) 时。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arguments["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 由于不能改变想让 this 指向的对象，再次删掉临时建立的属性。</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">txt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>txt <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">firstName</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">lastName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">"Doe"</span>\n<span class="token punctuation">}</span>\nperson<span class="token punctuation">.</span><span class="token method function property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\nperson<span class="token punctuation">.</span><span class="token property-access">fullName</span><span class="token punctuation">.</span><span class="token method function property-access">myCall</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 "Hello, John Doe"</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// myApply，相比 myCall，只需要注意一下，第二个参数是否存在就可以。</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  context <span class="token operator">=</span> context <span class="token operator">||</span> <span class="token dom variable">window</span>\n  <span class="token keyword">var</span> uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token method function property-access">hasOwnProperty</span><span class="token punctuation">(</span>uniqueID<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    uniqueID <span class="token operator">=</span> <span class="token string">"00"</span> <span class="token operator">+</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n \n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n      args<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"arr["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    result <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"context[uniqueID]("</span> <span class="token operator">+</span> args <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>uniqueID<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// this 保存在 thatFunc，否则 this 的指向会根据场景的不同而改变。</span>\n  <span class="token comment">// 取出 thatArg。</span>\n  <span class="token keyword">var</span> thatFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      thatArg <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 获取除第一个外的参数列表，继续传入到返回的参数中。</span>\n  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 确保 thatFunc 是个函数，否则报错。</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> thatFunc <span class="token operator">!==</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">\'Function.prototype.bind - \'</span> <span class="token operator">+</span>\n      <span class="token string">\'what is trying to be bound is not callable\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 由于 bind 不是立即执行的，所以要返回一个函数。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fBound</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用了 apply 改变指向</span>\n    <span class="token comment">// 如果是在 new 关键字调用情况下，会指向 newObj，而 newObj 就是 fBound 的实例，this instanceof fBound 就是true，我们不再使用 thatArg 作为 greeting 的 this，而是直接使用 newObj 作为 greeting 的 this。</span>\n    <span class="token comment">// 而当做普通函数调用的时候，this instanceof fBound 就是 false，greeting 中的 this 依然指向 thatArg。</span>\n    <span class="token keyword control-flow">return</span> thatFunc<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fBound</span>\n      <span class="token operator">?</span> <span class="token keyword">this</span>·\n      <span class="token operator">:</span> thatArg<span class="token punctuation">,</span>\n      <span class="token comment">// 拼凑</span>\n      args<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// 中间变量 fNOP 空函数，来维护原型关系，并让 fBound.prototype 与 thatFunc.prototype 不再指向同一个原型函数。</span>\n  <span class="token comment">// 确保 fBound 的 prototype 修改时，greeting 的 prototype 不会被修改。</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 把 fBound 的 prototype 修改为绑定函数的 prototype，这样 newObj 就可以“继承”自 greeting 了。</span>\n    fNOP<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> thatFunc<span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span> \n  <span class="token punctuation">}</span>\n  fBound<span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> fBound<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">"Smiley"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> <span class="token function-variable function">greeting</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> lang</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">\'greetingValue\'</span><span class="token punctuation">;</span>\n    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token operator">+</span><span class="token string">" to "</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">" in "</span><span class="token operator">+</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// var objGreeting = greeting.bind(obj, \'the world\');</span>\n<span class="token keyword">var</span> objGreeting <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token method function property-access">myBind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">\'the world\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token function">objGreeting</span><span class="token punctuation">(</span><span class="token string">\'JS\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Welcome Smiley to the world in JS</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">动手实现 map()、filter()、reduce()<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map1 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">myMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> map2 <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token arrow operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用数组的 reduce 方法实现</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myMap2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    accumulator<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> accumulator<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      results<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'spray\'</span><span class="token punctuation">,</span> <span class="token string">\'limit\'</span><span class="token punctuation">,</span> <span class="token string">\'elite\'</span><span class="token punctuation">,</span> <span class="token string">\'exuberant\'</span><span class="token punctuation">,</span> <span class="token string">\'destruction\'</span><span class="token punctuation">,</span> <span class="token string">\'present\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result1 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">myFilter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result2 <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">word</span> <span class="token arrow operator">=></span> word<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> accum <span class="token operator">=</span> init<span class="token punctuation">;</span>\n  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    accum <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>accum<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword control-flow">return</span> accum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 5 + 1 + 2 + 3 + 4</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">.</span><span class="token method function property-access">myReduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">实现数组扁平化操作<a class="anchor" href="#%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">myFlat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> count <span class="token operator">=</span> num\n        arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token method function property-access">myFlat</span><span class="token punctuation">(</span><span class="token operator">--</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n        arr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>  \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">return</span> arr<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">throw</span> tihs <span class="token operator">+</span> <span class="token string">".flat is not a function"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 递归</span>\n<span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span><span class="token method function property-access">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword control-flow">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 迭代</span>\n<span class="token keyword">function</span> <span class="token function">flatten2</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 从栈里取出</span>\n    <span class="token keyword">const</span> next <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 把next扁平化，然后放入stack中</span>\n      stack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token spread operator">...</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// reverse to restore input order</span>\n  <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">flatten2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// generator 异步迭代</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">flatten3</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>\n    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token method function property-access">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">yield</span><span class="token operator">*</span> <span class="token function">flatten3</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword control-flow">yield</span> item<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n\n<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> f <span class="token keyword">of</span> <span class="token function">flatten3</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">实现 JavaScript 继承<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 原型链继承</span>\n<span class="token keyword">function</span> <span class="token function">myExtend</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token constant">P</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token function-variable function"><span class="token maybe-class-name">F</span></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">F</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">C</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">constructor</span> <span class="token operator">=</span> <span class="token constant">C</span><span class="token punctuation">;</span>\n    <span class="token constant">C</span><span class="token punctuation">.</span><span class="token property-access">super</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h2 id="%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">实现 JavaScript 函数重载？<a class="anchor" href="#%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">§</a></h2>\n<p>方法 1，通过非严格模式下的 arguments：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">overLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token comment">// 根据 arguments.length，对不同的值进行不同的操作</span>\n　　<span class="token keyword control-flow">switch</span><span class="token punctuation">(</span><span class="token parameter">arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作1的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n　　　　　　<span class="token comment">/*操作2的代码写在这里*/</span>\n　　　　　　<span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n　　　　<span class="token keyword module">default</span><span class="token operator">:</span>\n　　　　    <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>方法 2：</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token comment">// addMethod</span>\n<span class="token keyword">function</span> <span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> name<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> old <span class="token operator">=</span> object<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 把前一次添加的方法存在一个临时变量 old 里面</span>\n　　object<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 重写了 object[name] 的方法</span>\n　　　　<span class="token comment">// 如果调用 object[name] 方法时，传入的参数个数跟预期的一致，则直接调用</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> arguments<span class="token punctuation">.</span><span class="token property-access">length</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> fn<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token comment">// 否则，判断 old 是否是函数，如果是，就调用 old</span>\n　　　　<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> old <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　<span class="token keyword control-flow">return</span> old<span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n　　values<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">,</span> <span class="token string">"Alex Russell"</span><span class="token punctuation">,</span> <span class="token string">"Dean Tom"</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token comment">/* 下面开始通过 addMethod 来实现对 people.find 方法的重载 */</span>\n \n<span class="token comment">// 不传参数时，返回 peopld.values 里面的所有元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword control-flow">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传一个参数时，按 first-name 的匹配进行返回</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 传两个参数时，返回 first-name 和 last-name 都匹配的元素</span>\n<span class="token function">addMethod</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token string">"find"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　<span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n　　<span class="token keyword control-flow">for</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　<span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token punctuation">(</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n　　　　　　ret<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">values</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n　　　　<span class="token punctuation">}</span>\n　　<span class="token punctuation">}</span>\n　　<span class="token keyword control-flow">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 测试：</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Alex Russell", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards", "Dean Tom"]</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token string">"Dean Edwards"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["Dean Edwards"]</span>\n</code></pre>\n<h2 id="%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">动手实现 JSON<a class="anchor" href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token known-class-name class-name">JSON</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">parse</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sJSON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">\'(\'</span> <span class="token operator">+</span> sJSON <span class="token operator">+</span> <span class="token string">\')\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    stringify<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> toString <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">toString</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> isArray <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">isArray</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword control-flow">return</span> toString<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'[object Array]\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> escMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">\'"\'</span><span class="token operator">:</span> <span class="token string">\'\\"\'</span><span class="token punctuation">,</span> <span class="token string">\'\\', span
        } > (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\\\\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\b\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\b\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\f\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\f\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\n\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\n\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\r\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\r\\'"), (React.createElement("span", { class: "token punctuation" }, ","), (React.createElement("span", { class: "token string" }, "\\'\\t\\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\\\t\\'"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";")))))))))))))))))))))))), n: true }), (React.createElement("span", { class: "token keyword" }, "var"), (React.createElement("span", { class: "token function-variable function" }, "escFunc"), (React.createElement("span", { class: "token operator" }, "="), (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "m"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ), React.createElement("span", { class: "token keyword control-flow" }, "return")))))))))),
    class:  = "token punctuation" > [span > m < span, class {
        } = "token punctuation" > ], span
} > (React.createElement("span", { class: "token operator" }, "||"), (React.createElement("span", { class: "token string" }, "\\'\\\\u\\'"), (React.createElement("span", { class: "token operator" }, "+"), React.createElement("span", { class: "token punctuation" }, "("))));
m < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "charCodeAt"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "0"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token number" }, "0x10000"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "16"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "substr"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token number" }, "1"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ";"), (React.createElement("span", { class: "token punctuation" }, "}"), React.createElement("span", { class: "token punctuation" }, ";"))))))))))))))))))));
n < span;
class {
}
"token keyword" > ;
var span;
 > escRE < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token regex" },
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-source language-regex" }, "[\\\\\"\\u0000-\\u001F\\u2028\\u2029]"),
    React.createElement("span", { class: "token regex-delimiter" }, "/"),
    React.createElement("span", { class: "token regex-flags" }, "g")), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token keyword" }, "function"), (React.createElement("span", { class: "token function" }, "stringify"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token parameter" }, "value"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))))));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token keyword null nil" }, "null"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'number\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "isFinite"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token operator" }, "?");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'null\\'"), React.createElement("span", { class: "token punctuation" }, ";"))))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'boolean\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"))));
value < span;
class {
}
"token operator" >=  == ;
span > (React.createElement("span", { class: "token string" }, "\\'object\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )));
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "typeof"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "toJSON"), (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'function\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, )))));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toJSON"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")))));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "isArray"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ));
n < span;
class {
}
"token keyword" > ;
var span;
 > res < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token string" }, "\\'[\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
i < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token number" }, "0"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" >  & lt;
span > value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token property-access" }, "length"), React.createElement("span", { class: "token punctuation" }, ";"));
i < span;
class {
}
"token operator" > ++;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
res < span;
class {
}
"token operator" > ;
span > React.createElement("span", { class: "token punctuation" }, "(");
i < span;
class {
}
"token operator" >  ?  : ;
span > (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token operator" }, ":"), (React.createElement("span", { class: "token string" }, "\\'\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))))));
value < span;
class {
}
"token punctuation" > [span > i < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > res < span;
class {
}
"token operator" > +;
span > (React.createElement("span", { class: "token string" }, "\\']\\'"), React.createElement("span", { class: "token punctuation" }, ";"));
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token keyword control-flow" }, "else"), (React.createElement("span", { class: "token keyword control-flow" }, "if"), React.createElement("span", { class: "token punctuation" }, "(")));
toString < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "call"), React.createElement("span", { class: "token punctuation" }, "("));
value < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "==="), (React.createElement("span", { class: "token string" }, "\\'[object Object]\\'"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ))));
n < span;
class {
}
"token keyword" > ;
var span;
 > tmp < span;
class {
}
"token operator" >= ;
span > (React.createElement("span", { class: "token punctuation" }, "["), (React.createElement("span", { class: "token punctuation" }, "]"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token keyword control-flow" > ;
for (; ; )
    ;
span > (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token keyword" }, "var"));
k < span;
class {
}
"token keyword" >  in ;
span > value < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, );
n < span;
class {
}
"token keyword control-flow" > ;
if ()
    ;
span > React.createElement("span", { class: "token punctuation" }, "(");
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "hasOwnProperty"), React.createElement("span", { class: "token punctuation" }, "("));
k < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ")");
n;
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "push"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "("))));
k < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\': \\'"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token function" }, "stringify"), React.createElement("span", { class: "token punctuation" }, "(")))));
value < span;
class {
}
"token punctuation" > [span > k < span, class {
    } = "token punctuation" > ];
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, ")"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" },
    "\\'",
,
    "\\'"), React.createElement("span", { class: "token operator" }, "+"));
tmp < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "join"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token string" }, "\\', \\'"), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'}\\'"), React.createElement("span", { class: "token punctuation" }, ";")))))));
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token punctuation" > ;
span > ;
n < span;
class {
}
"token keyword control-flow" > ;
return ;
span > (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token operator" }, "+"));
value < span;
class {
}
"token punctuation" > .;
span > (React.createElement("span", { class: "token method function property-access" }, "toString"), (React.createElement("span", { class: "token punctuation" }, "("), (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "."), (React.createElement("span", { class: "token method function property-access" }, "replace"), React.createElement("span", { class: "token punctuation" }, "("))))));
escRE < span;
class {
}
"token punctuation" > , ;
span > escFunc < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token operator" }, "+"), (React.createElement("span", { class: "token string" }, "\\'\"\\'"), React.createElement("span", { class: "token punctuation" }, ";")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > (React.createElement("span", { class: "token punctuation" }, ")"), (React.createElement("span", { class: "token punctuation" }, "("), React.createElement("span", { class: "token punctuation" }, ")")));
n < span;
class {
}
"token punctuation" > ;
span > React.createElement("span", { class: "token punctuation" }, ";");
n < span;
class {
}
"token punctuation" > ;
span > ;
n;
code > ;
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest" > 动手实现;
XMLHttpRequest < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "ajax"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "url",
        React.createElement("span", { class: "token punctuation" }, ","),
        " fnSucc",
        React.createElement("span", { class: "token punctuation" }, ","),
        " fnFaild"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " xhttp",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u7B2C\u4E00\u6B65\uFF1A\u521B\u5EFA XMLHttpRequest \u5BF9\u8C61"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token dom variable" }, "window"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" },
        React.createElement("span", { class: "token maybe-class-name" }, "XMLHttpRequest")),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u73B0\u4EE3\u6D4F\u89C8\u5668"),
    "\\n      xhttp ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "XMLHttpRequest"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n   ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// IE6 \u7B49\u8001\u7248\u672C\u6D4F\u89C8\u5668"),
    "\\n      xhttp ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "ActiveXObject"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token string" }, "\"Microsoft.XMLHTTP\""),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u7B2C\u56DB\u6B65\uFF1A\u5904\u7406\u54CD\u5E94"),
    "\\n  xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method-variable function-variable method function property-access" }, "onreadystatechange"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "readyState"),
    " ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token number" }, "4"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "status"),
    " ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token number" }, "200"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "fnSucc"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "responseText"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "fnFaild",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token function" }, "fnFaild"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "responseText"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " \\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u7B2C\u4E8C\u6B65\uFF1A\u521D\u59CB\u5316 XMLHttpRequest \u65B9\u6CD5"),
    "\\n  xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "open"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token string" }, "\\'GET\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " url",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u7B2C\u4E09\u6B65\uFF1AXMLHttpRequest \u5411\u670D\u52A1\u5668\u53D1\u9001\u8BF7\u6C42"),
    "\\n  xhttp",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "send"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n\\n",
    React.createElement("span", { class: "token function" }, "ajax"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token string" }, "\\'/smileyFace\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " mySuccessFunc",
    React.createElement("span", { class: "token punctuation" }, ","),
    " myFailFunc",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%85%8B%E9%9A%86" > 动手实现数组克隆 < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%85%8B%E9%9A%86" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "let"),
    " array1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token number" }, "1"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token string" }, "\\'a\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token boolean" }, "true"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token keyword nil" }, "undefined"),
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " c1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " array1",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "slice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " cc1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " array1",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "concat"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " fc1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token keyword module" }, "from"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "array1",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "push"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " array1",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " mc1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " array1",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "map"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "item"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " item",
    React.createElement("span", { class: "token punctuation" }, ";"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token comment" }, "// \u53D8\u76F8\u7684\u5B9E\u73B0\u6DF1\u62F7\u8D1D\uFF0C\u6570\u7EC4\u4E2D\u7684\u9879\u5982\u679C\u662Fundefined\uFF0C\u90A3\u4E48\u8F6C\u6362\u540E\u5C06\u53D8\u4E3Anull"),
    "\\n",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u6570\u7EC4\u7684\u9879\u4E3A\u5BF9\u8C61\uFF0C\u90A3\u4E48\u5BF9\u8C61\u4E4B\u95F4\u4E0D\u53EF\u76F8\u4E92\u5F15\u7528\u3002\u4F1A\u9020\u6210\u5FAA\u73AF\u5F15\u7528\uFF0C\u65E0\u6CD5JSON\u5E8F\u5217\u5316\u3002"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " jsonc ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "JSON"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "parse"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token known-class-name class-name" }, "JSON"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "stringify"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "array1",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " fc1 ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token spread operator" }, "..."),
    "array1",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86" > 动手实现对象克隆 < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "obj"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " obj ",
    React.createElement("span", { class: "token operator" }, "=="),
    " ",
    React.createElement("span", { class: "token string" }, "\"object\""),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "var"),
    " i ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token number" }, "0"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " len ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "length"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    " i ",
    React.createElement("span", { class: "token operator" }, "<"),
    " len",
    React.createElement("span", { class: "token punctuation" }, ";"),
    " i",
    React.createElement("span", { class: "token operator" }, "++"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    o",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "push"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "i",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "var"),
    " k ",
    React.createElement("span", { class: "token keyword" }, "in"),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "k",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "k",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        o ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "obj"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ","),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "constructor"),
    " ",
    React.createElement("span", { class: "token operator" }, "=="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" },
        "obj",
        React.createElement("span", { class: "token punctuation" }, "."),
        "constructor"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" },
        "obj",
        React.createElement("span", { class: "token punctuation" }, "."),
        "constructor"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "valueOf"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "var"),
    " key ",
    React.createElement("span", { class: "token keyword" }, "in"),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    " o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "!="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    " ",
    React.createElement("span", { class: "token keyword" }, "typeof"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token operator" }, "=="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'object\\'"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    o",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "toString"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "toString"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    o",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "valueOf"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "valueOf"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "obj"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" },
        React.createElement("span", { class: "token maybe-class-name" }, "Fn")),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token class-name" }, "Fn"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " o ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Fn"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "var"),
    " a ",
    React.createElement("span", { class: "token keyword" }, "in"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "a",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "=="),
    " ",
    React.createElement("span", { class: "token string" }, "\"object\""),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "a",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "o",
    React.createElement("span", { class: "token punctuation" }, "["),
    "a",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " o",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D" > 动手实现浅拷贝与深拷贝 < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token comment" }, "// \u540C\u65F6\u8003\u8651\u5BF9\u8C61\u548C\u6570\u7EC4\uFF0C\u8003\u8651\u5FAA\u73AF\u5F15\u7528"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " map ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "WeakMap"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " target ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'object\\'"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " cloneTarget ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "isArray"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token operator" }, "?"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "map",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "get"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " target",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    map",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "set"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " cloneTarget",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "const"),
    " key ",
    React.createElement("span", { class: "token keyword" }, "in"),
    " target",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      cloneTarget",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "clone"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, "["),
    "key",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " map",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " cloneTarget",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " target",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < ul > ;
n < li > 数组浅拷贝;
li > ;
n;
ul > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "var"),
    " a ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token number" }, "1"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token number" }, "1"),
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    b ",
    React.createElement("span", { class: "token operator" }, "="),
    " a",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token console class-name" }, "console"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "log"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "a ",
    React.createElement("span", { class: "token operator" }, "==="),
    " b",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token comment" }, "// true"),
    "\\n");
pre > ;
n < ul > ;
n < li > 数组深拷贝;
li > ;
n;
ul > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "cloneObj"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "obj"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " tempObj ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    \\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "obj ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        tempObj ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    \\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "var"),
    " prop ",
    React.createElement("span", { class: "token keyword" }, "in"),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " prop ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'Object\\'"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token function" }, "cloneObj"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "prop",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        \\n        tempObj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "prop",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " obj",
    React.createElement("span", { class: "token punctuation" }, "["),
    "prop",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    \\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " tempObj",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " myCountry ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    name",
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token string" }, "\\'China\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    birth",
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token number" }, "1949"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " country ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "cloneObj"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "myCountry",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token console class-name" }, "console"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "log"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "country ",
    React.createElement("span", { class: "token operator" }, "==="),
    " myCountry",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    " ",
    React.createElement("span", { class: "token comment" }, "// false"),
    "\\n");
pre > ;
n < h2;
id = "%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask" > 使用;
MutationObserver;
实现;
microtask < a;
class {
}
"anchor";
href = "#%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask" > ;
a > ;
h2 > ;
n < p > MutationObserver;
可以用来实现;
microtask;
它属于;
microtask;
优先级小于;
Promise;
一般是;
Promise;
不支持时才会这样做;
p > ;
n < p > 它是;
HTML5;
中的新特性;
作用是;
监听一个;
DOM;
变动;
p > ;
n < p > 当;
DOM;
对象树发生任何变动时;
Mutation;
Observer;
会得到通知;
p > ;
n < p > 像以前的;
Vue;
源码中就是利用它来模拟;
nextTick;
的;
具体原理是;
创建一个;
TextNode;
并监听内容变化;
p > ;
n < p > 然后要;
nextTick;
的时候去改一下这个节点的文本内容;
p > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "var"),
    " counter ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token number" }, "1"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " observer ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MutationObserver"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "nextTickHandler",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " textNode ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token dom variable" }, "document"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "createTextNode"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token known-class-name class-name" }, "String"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "counter",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n\\nobserver",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "observe"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "textNode",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    characterData",
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token boolean" }, "true"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n",
    React.createElement("span", { class: "token function-variable function" }, "timerFunc"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    counter ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "counter ",
    React.createElement("span", { class: "token operator" }, "+"),
    " ",
    React.createElement("span", { class: "token number" }, "1"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token operator" }, "%"),
    " ",
    React.createElement("span", { class: "token number" }, "2"),
    "\\n    textNode",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "data"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "String"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "counter",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < p > 不过;
现在的;
Vue;
2.5 + 的;
nextTick;
实现移除了;
MutationObserver;
的方式(据说是兼容性原因);
取而代之的是使用;
MessageChannel;
p > ;
n(当然, 默认情况仍然是, Promise, 不支持才兼容的);
p > ;
n < p > MessageChannel;
属于宏任务;
优先级是;
MessageChannel -  & gt;
setTimeout;
所以;
Vue;
2.5 + 内部的;
nextTick;
与;
2.4;
及之前的实现是不一样的;
需要注意下;
p > ;
n < h2;
id = "%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" > 使用;
Proxy;
拓展构造函数 < a;
class {
}
"anchor";
href = "#%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-js" > React.createElement("code", { class: "language-js" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "extend"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "sup",
        React.createElement("span", { class: "token punctuation" }, ","),
        " base"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " descriptor ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "getOwnPropertyDescriptor"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "\\n    base",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token string" }, "\"constructor\""),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  base",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "create"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "sup",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " handler ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token function-variable function" }, "construct"),
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " args"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " obj ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "create"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "base",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " obj",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    ",
    React.createElement("span", { class: "token function-variable function" }, "apply"),
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " that",
        React.createElement("span", { class: "token punctuation" }, ","),
        " args"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      sup",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "that",
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      base",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "that",
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " proxy ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Proxy"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "base",
    React.createElement("span", { class: "token punctuation" }, ","),
    " handler",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  descriptor",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " proxy",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "defineProperty"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "base",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token string" }, "\"constructor\""),
    React.createElement("span", { class: "token punctuation" }, ","),
    " descriptor",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " proxy",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " ",
    React.createElement("span", { class: "token function-variable function" },
        React.createElement("span", { class: "token maybe-class-name" }, "Person")),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "name"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "name"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " name\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " ",
    React.createElement("span", { class: "token maybe-class-name" }, "Boy"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "extend"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token maybe-class-name" }, "Person"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "name",
        React.createElement("span", { class: "token punctuation" }, ","),
        " age"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "age"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " age",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token class-name" }, "Boy"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "sex"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token string" }, "\"M\""),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "var"),
    " ",
    React.createElement("span", { class: "token maybe-class-name" }, "Peter"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Boy"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token string" }, "\"Peter\""),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token number" }, "13"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token console class-name" }, "console"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "log"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token maybe-class-name" }, "Peter"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "sex"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "  ",
    React.createElement("span", { class: "token comment" }, "// \"M\""),
    "\\n",
    React.createElement("span", { class: "token console class-name" }, "console"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "log"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token maybe-class-name" }, "Peter"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "name"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    " ",
    React.createElement("span", { class: "token comment" }, "// \"Peter\""),
    "\\n",
    React.createElement("span", { class: "token console class-name" }, "console"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "log"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token maybe-class-name" }, "Peter"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "age"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "  ",
    React.createElement("span", { class: "token comment" }, "// 13"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0" > 动手实现柯里化函数 < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "myCurry"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "fn"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " args ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "slice"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "arguments",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token number" }, "1"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " innerArgs ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "slice"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "arguments",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " finalArgs ",
    React.createElement("span", { class: "token operator" }, "="),
    " args",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "concat"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "innerArgs",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " fn",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " finalArgs",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n\\n",
    React.createElement("span", { class: "token comment" }, "// \u81EA\u52A8\u68C0\u6D4B\u53C2\u6570\u662F\u5426\u4F20\u9012\u5B8C\u6BD5"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "myCurry"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "fn"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "currify"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " args ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token class-name" }, "Array"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "slice"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "arguments",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " args",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "length"),
    " ",
    React.createElement("span", { class: "token operator" }, ">="),
    " fn",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "length"),
    " ",
    React.createElement("span", { class: "token operator" }, "?"),
    "\\n      fn",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token operator" }, ":"),
    "\\n    currify",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "bind"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token spread operator" }, "..."),
    "args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop" > 动手实现;
JavaScript;
AOP < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop" > ;
a > ;
h2 > ;
n < blockquote > ;
n < p > React.createElement("a", { href: "https://juejin.im/post/6844903858649432078" }, "https://juejin.im/post/6844903858649432078");
p > ;
n;
blockquote > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "emptyFunc"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "findPointCut"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " pointCut ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'string\\'"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " func ",
    React.createElement("span", { class: "token operator" }, "="),
    " target",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "["),
    "pointCut",
    React.createElement("span", { class: "token punctuation" }, "]"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token comment" }, "// \u6682\u4E0D\u652F\u6301\u5C5E\u6027\u7684aop"),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " func ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'function\\'"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " func",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6682\u4E0D\u652F\u6301\u6A21\u7CCA\u5339\u914D\u5207\u70B9"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "advice"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " advice ",
        React.createElement("span", { class: "token operator" }, "="),
        " ",
        React.createElement("span", { class: "token punctuation" }, ),
        React.createElement("span", { class: "token punctuation" }, "}")),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " old ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "findPointCut"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "old",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        target",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, "["),
    "pointCut",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " self ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " args ",
    React.createElement("span", { class: "token operator" }, "="),
    " arguments",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " joinPoint ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                target",
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n                method",
    React.createElement("span", { class: "token operator" }, ":"),
    " old",
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n                args",
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n                self\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "before",
    React.createElement("span", { class: "token punctuation" }, ","),
    " round",
    React.createElement("span", { class: "token punctuation" }, ","),
    " after",
    React.createElement("span", { class: "token punctuation" }, ","),
    " afterReturn",
    React.createElement("span", { class: "token punctuation" }, ","),
    " afterThrow",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " advice",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token comment" }, "// \u524D\u7F6E\u589E\u5F3A"),
    "\\n            before ",
    React.createElement("span", { class: "token operator" }, "&&"),
    " before",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " joinPoint",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token comment" }, "// \u73AF\u7ED5\u589E\u5F3A"),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " roundJoinPoint ",
    React.createElement("span", { class: "token operator" }, "="),
    " joinPoint",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "round",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                roundJoinPoint ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token known-class-name class-name" }, "Object"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "assign"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "joinPoint",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    ",
    React.createElement("span", { class: "token function-variable function" }, "handle"),
    React.createElement("span", { class: "token operator" }, ":"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                        ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " old",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " arguments ",
    React.createElement("span", { class: "token operator" }, "||"),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                ",
    React.createElement("span", { class: "token comment" }, "// \u6CA1\u6709\u58F0\u660Eround\u589E\u5F3A,\u76F4\u63A5\u6267\u884C\u539F\u65B9\u6CD5"),
    "\\n                ",
    React.createElement("span", { class: "token function-variable function" }, "round"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    old",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "after ",
    React.createElement("span", { class: "token operator" }, "||"),
    " afterReturn ",
    React.createElement("span", { class: "token operator" }, "||"),
    " afterThrow",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " result ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " error ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token keyword control-flow" }, "try"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    result ",
    React.createElement("span", { class: "token operator" }, "="),
    " round",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " roundJoinPoint",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                    ",
    React.createElement("span", { class: "token comment" }, "// \u8FD4\u56DE\u589E\u5F3A"),
    "\\n                    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " afterReturn ",
    React.createElement("span", { class: "token operator" }, "&&"),
    " afterReturn",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " joinPoint",
    React.createElement("span", { class: "token punctuation" }, ","),
    " result",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token operator" }, "||"),
    " result",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "catch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "e",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    error ",
    React.createElement("span", { class: "token operator" }, "="),
    " e",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                    ",
    React.createElement("span", { class: "token comment" }, "// \u5F02\u5E38\u589E\u5F3A"),
    "\\n                    ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " shouldIntercept ",
    React.createElement("span", { class: "token operator" }, "="),
    " afterThrow ",
    React.createElement("span", { class: "token operator" }, "&&"),
    " afterThrow",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " joinPoint",
    React.createElement("span", { class: "token punctuation" }, ","),
    " e",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token operator" }, "!"),
    "shouldIntercept",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                        ",
    React.createElement("span", { class: "token keyword control-flow" }, "throw"),
    " e",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "finally"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                    ",
    React.createElement("span", { class: "token comment" }, "// \u540E\u7F6E\u589E\u5F3A"),
    "\\n                    after ",
    React.createElement("span", { class: "token operator" }, "&&"),
    " after",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " joinPoint",
    React.createElement("span", { class: "token punctuation" }, ","),
    " result",
    React.createElement("span", { class: "token punctuation" }, ","),
    " error",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n                ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n                ",
    React.createElement("span", { class: "token comment" }, "// \u672A\u5B9A\u4E49\u4EFB\u4F55\u540E\u7F6E\u589E\u5F3A,\u76F4\u63A5\u6267\u884C\u539F\u65B9\u6CD5"),
    "\\n                ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " round",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "call"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " roundJoinPoint",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "let"),
    " aop ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "before"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " before ",
        React.createElement("span", { class: "token operator" }, "="),
        " emptyFunc"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "advice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "before",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "after"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " after ",
        React.createElement("span", { class: "token operator" }, "="),
        " emptyFunc"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "advice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "after",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "afterReturn"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " afterReturn ",
        React.createElement("span", { class: "token operator" }, "="),
        " emptyFunc"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "advice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "afterReturn",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "afterThrow"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " afterThrow ",
        React.createElement("span", { class: "token operator" }, "="),
        " emptyFunc"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "advice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "afterThrow",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "round"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "target",
        React.createElement("span", { class: "token punctuation" }, ","),
        " pointCut",
        React.createElement("span", { class: "token punctuation" }, ","),
        " round ",
        React.createElement("span", { class: "token operator" }, "="),
        " emptyFunc"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "advice"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "target",
    React.createElement("span", { class: "token punctuation" }, ","),
    " pointCut",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "round",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword module" }, "export"),
    " ",
    React.createElement("span", { class: "token keyword module" }, "default"),
    " aop",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n");
pre > ;
n < h2;
id = "%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise" > 动手实现;
Promise < a;
class {
}
"anchor";
href = "#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token comment" }, "// \u5224\u65AD\u53D8\u91CF\u5426\u4E3Afunction"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "isFunction"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token parameter" }, "variable"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token keyword" }, "typeof"),
    " variable ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'function\\'"),
    "\\n",
    React.createElement("span", { class: "token comment" }, "// \u5B9A\u4E49Promise\u7684\u4E09\u79CD\u72B6\u6001\u5E38\u91CF"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token constant" }, "PENDING"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'PENDING\\'"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token constant" }, "FULFILLED"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'FULFILLED\\'"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token constant" }, "REJECTED"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token string" }, "\\'REJECTED\\'"),
    "\\n\\n",
    React.createElement("span", { class: "token keyword" }, "class"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token function" }, "constructor"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "handle"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token operator" }, "!"),
    React.createElement("span", { class: "token function" }, "isFunction"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "handle",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "throw"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Error"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token string" }, "\\'MyPromise must accept a function as a parameter\\'"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u72B6\u6001"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "PENDING"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u72B6\u6001"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword nil" }, "undefined"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u6210\u529F\u56DE\u8C03\u51FD\u6570\u961F\u5217"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_fulfilledQueues"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u5931\u8D25\u56DE\u8C03\u51FD\u6570\u961F\u5217"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_rejectedQueues"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u6267\u884Chandle"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "try"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token function" }, "handle"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "_resolve"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "bind"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "_reject"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "bind"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " \\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "catch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "_reject"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0resovle\u65F6\u6267\u884C\u7684\u51FD\u6570"),
    "\\n  ",
    React.createElement("span", { class: "token function" }, "_resolve"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "val"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "run"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "!=="),
    " ",
    React.createElement("span", { class: "token constant" }, "PENDING"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u4F9D\u6B21\u6267\u884C\u6210\u529F\u961F\u5217\u4E2D\u7684\u51FD\u6570\uFF0C\u5E76\u6E05\u7A7A\u961F\u5217"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "runFulfilled"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "value"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " cb",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "while"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "cb ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_fulfilledQueues"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "shift"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "cb"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u4F9D\u6B21\u6267\u884C\u5931\u8D25\u961F\u5217\u4E2D\u7684\u51FD\u6570\uFF0C\u5E76\u6E05\u7A7A\u961F\u5217"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "runRejected"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "error"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " cb",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "while"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "cb ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_rejectedQueues"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "shift"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "cb"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "error",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "/* \u5982\u679Cresolve\u7684\u53C2\u6570\u4E3APromise\u5BF9\u8C61\uFF0C\u5219\u5FC5\u987B\u7B49\u5F85\u8BE5Promise\u5BF9\u8C61\u72B6\u6001\u6539\u53D8\u540E,\\n          \u5F53\u524DPromsie\u7684\u72B6\u6001\u624D\u4F1A\u6539\u53D8\uFF0C\u4E14\u72B6\u6001\u53D6\u51B3\u4E8E\u53C2\u6570Promsie\u5BF9\u8C61\u7684\u72B6\u6001\\n        */"),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "val ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        val",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "value"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " value\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "FULFILLED"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "runFulfilled"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token parameter" }, "err"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " err\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "REJECTED"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "runRejected"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " val\\n        ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "FULFILLED"),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "runFulfilled"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "val",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u4E3A\u4E86\u652F\u6301\u540C\u6B65\u7684Promise\uFF0C\u8FD9\u91CC\u91C7\u7528\u5F02\u6B65\u8C03\u7528"),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "setTimeout"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "run",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token number" }, "0"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0reject\u65F6\u6267\u884C\u7684\u51FD\u6570"),
    "\\n  ",
    React.createElement("span", { class: "token function" }, "_reject"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "err"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    " \\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "!=="),
    " ",
    React.createElement("span", { class: "token constant" }, "PENDING"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u4F9D\u6B21\u6267\u884C\u5931\u8D25\u961F\u5217\u4E2D\u7684\u51FD\u6570\uFF0C\u5E76\u6E05\u7A7A\u961F\u5217"),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "run"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_status"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "REJECTED"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_value"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " err\\n      ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " cb",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "while"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "cb ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_rejectedQueues"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "shift"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "cb"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u4E3A\u4E86\u652F\u6301\u540C\u6B65\u7684Promise\uFF0C\u8FD9\u91CC\u91C7\u7528\u5F02\u6B65\u8C03\u7528"),
    "\\n    ",
    React.createElement("span", { class: "token function" }, "setTimeout"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "run",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token number" }, "0"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0then\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token function" }, "then"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "onFulfilled",
        React.createElement("span", { class: "token punctuation" }, ","),
        " onRejected"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "const"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    " _value",
    React.createElement("span", { class: "token punctuation" }, ","),
    " _status ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684Promise\u5BF9\u8C61"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "onFulfilledNext",
        React.createElement("span", { class: "token punctuation" }, ","),
        " onRejectedNext"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u5C01\u88C5\u4E00\u4E2A\u6210\u529F\u65F6\u6267\u884C\u7684\u51FD\u6570"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "fulfilled"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token parameter" }, "value"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "try"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token operator" }, "!"),
    React.createElement("span", { class: "token function" }, "isFunction"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "onFulfilled",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token function" }, "onFulfilledNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " res ",
    React.createElement("span", { class: "token operator" }, "="),
    "  ",
    React.createElement("span", { class: "token function" }, "onFulfilled"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "res ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n              ",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u5F53\u524D\u56DE\u8C03\u51FD\u6570\u8FD4\u56DEMyPromise\u5BF9\u8C61\uFF0C\u5FC5\u987B\u7B49\u5F85\u5176\u72B6\u6001\u6539\u53D8\u540E\u5728\u6267\u884C\u4E0B\u4E00\u4E2A\u56DE\u8C03"),
    "\\n              res",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "onFulfilledNext",
    React.createElement("span", { class: "token punctuation" }, ","),
    " onRejectedNext",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n              ",
    React.createElement("span", { class: "token comment" }, "//\u5426\u5219\u4F1A\u5C06\u8FD4\u56DE\u7ED3\u679C\u76F4\u63A5\u4F5C\u4E3A\u53C2\u6570\uFF0C\u4F20\u5165\u4E0B\u4E00\u4E2Athen\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u5E76\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2Athen\u7684\u56DE\u8C03\u51FD\u6570"),
    "\\n              ",
    React.createElement("span", { class: "token function" }, "onFulfilledNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "res",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n          ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "catch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u51FD\u6570\u6267\u884C\u51FA\u9519\uFF0C\u65B0\u7684Promise\u5BF9\u8C61\u7684\u72B6\u6001\u4E3A\u5931\u8D25"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "onRejectedNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u5C01\u88C5\u4E00\u4E2A\u5931\u8D25\u65F6\u6267\u884C\u7684\u51FD\u6570"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token function-variable function" }, "rejected"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token parameter" }, "error"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "try"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token operator" }, "!"),
    React.createElement("span", { class: "token function" }, "isFunction"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "onRejected",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token function" }, "onRejectedNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "error",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " res ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token function" }, "onRejected"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "error",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "res ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n              ",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u5F53\u524D\u56DE\u8C03\u51FD\u6570\u8FD4\u56DEMyPromise\u5BF9\u8C61\uFF0C\u5FC5\u987B\u7B49\u5F85\u5176\u72B6\u6001\u6539\u53D8\u540E\u5728\u6267\u884C\u4E0B\u4E00\u4E2A\u56DE\u8C03"),
    "\\n              res",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "onFulfilledNext",
    React.createElement("span", { class: "token punctuation" }, ","),
    " onRejectedNext",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "else"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n              ",
    React.createElement("span", { class: "token comment" }, "//\u5426\u5219\u4F1A\u5C06\u8FD4\u56DE\u7ED3\u679C\u76F4\u63A5\u4F5C\u4E3A\u53C2\u6570\uFF0C\u4F20\u5165\u4E0B\u4E00\u4E2Athen\u7684\u56DE\u8C03\u51FD\u6570\uFF0C\u5E76\u7ACB\u5373\u6267\u884C\u4E0B\u4E00\u4E2Athen\u7684\u56DE\u8C03\u51FD\u6570"),
    "\\n              ",
    React.createElement("span", { class: "token function" }, "onFulfilledNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "res",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n            ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n          ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "catch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u51FD\u6570\u6267\u884C\u51FA\u9519\uFF0C\u65B0\u7684Promise\u5BF9\u8C61\u7684\u72B6\u6001\u4E3A\u5931\u8D25"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "onRejectedNext"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "switch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "_status",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u5F53\u72B6\u6001\u4E3Apending\u65F6\uFF0C\u5C06then\u65B9\u6CD5\u56DE\u8C03\u51FD\u6570\u52A0\u5165\u6267\u884C\u961F\u5217\u7B49\u5F85\u6267\u884C"),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "case"),
    " ",
    React.createElement("span", { class: "token constant" }, "PENDING"),
    React.createElement("span", { class: "token operator" }, ":"),
    "\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_fulfilledQueues"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "push"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "fulfilled",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "_rejectedQueues"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "push"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "rejected",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "break"),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u5F53\u72B6\u6001\u5DF2\u7ECF\u6539\u53D8\u65F6\uFF0C\u7ACB\u5373\u6267\u884C\u5BF9\u5E94\u7684\u56DE\u8C03\u51FD\u6570"),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "case"),
    " ",
    React.createElement("span", { class: "token constant" }, "FULFILLED"),
    React.createElement("span", { class: "token operator" }, ":"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "fulfilled"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "_value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "break"),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "case"),
    " ",
    React.createElement("span", { class: "token constant" }, "REJECTED"),
    React.createElement("span", { class: "token operator" }, ":"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "rejected"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "_value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "break"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0catch\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "catch"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "onRejected",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword nil" }, "undefined"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " onRejected",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u9759\u6001resolve\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "static"),
    " ",
    React.createElement("span", { class: "token function" }, "resolve"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "value"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u5982\u679C\u53C2\u6570\u662FMyPromise\u5B9E\u4F8B\uFF0C\u76F4\u63A5\u8FD4\u56DE\u8FD9\u4E2A\u5B9E\u4F8B"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "value ",
    React.createElement("span", { class: "token keyword" }, "instanceof"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " value\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "resolve"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token function" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u9759\u6001reject\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "static"),
    " ",
    React.createElement("span", { class: "token function" }, "reject"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "value"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "resolve ",
        React.createElement("span", { class: "token punctuation" }, ","),
        "reject"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token function" }, "reject"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u9759\u6001all\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "static"),
    " ",
    React.createElement("span", { class: "token function" }, "all"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "list"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "resolve",
        React.createElement("span", { class: "token punctuation" }, ","),
        " reject"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token doc-comment comment" }, "/**\\n         * \u8FD4\u56DE\u503C\u7684\u96C6\u5408\\n         */"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " values ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    React.createElement("span", { class: "token punctuation" }, "]"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "let"),
    " count ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token number" }, "0"),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "let"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "["),
    "i",
    React.createElement("span", { class: "token punctuation" }, ","),
    " p",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token keyword" }, "of"),
    " list",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "entries"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token comment" }, "// \u6570\u7EC4\u53C2\u6570\u5982\u679C\u4E0D\u662FMyPromise\u5B9E\u4F8B\uFF0C\u5148\u8C03\u7528MyPromise.resolve"),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "p",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "res"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          values",
    React.createElement("span", { class: "token punctuation" }, "["),
    "i",
    React.createElement("span", { class: "token punctuation" }, "]"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " res\\n          count",
    React.createElement("span", { class: "token operator" }, "++"),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u6240\u6709\u72B6\u6001\u90FD\u53D8\u6210fulfilled\u65F6\u8FD4\u56DE\u7684MyPromise\u72B6\u6001\u5C31\u53D8\u6210fulfilled"),
    "\\n          ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "count ",
    React.createElement("span", { class: "token operator" }, "==="),
    " list",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "length"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token function" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "values",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token parameter" }, "err"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token comment" }, "// \u6709\u4E00\u4E2A\u88ABrejected\u65F6\u8FD4\u56DE\u7684MyPromise\u72B6\u6001\u5C31\u53D8\u6210rejected"),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "reject"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token comment" }, "// \u6DFB\u52A0\u9759\u6001race\u65B9\u6CD5"),
    "\\n  ",
    React.createElement("span", { class: "token keyword" }, "static"),
    " ",
    React.createElement("span", { class: "token function" }, "race"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "list"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "resolve",
        React.createElement("span", { class: "token punctuation" }, ","),
        " reject"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token keyword control-flow" }, "for"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "let"),
    " p ",
    React.createElement("span", { class: "token keyword" }, "of"),
    " list",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token comment" }, "// \u53EA\u8981\u6709\u4E00\u4E2A\u5B9E\u4F8B\u7387\u5148\u6539\u53D8\u72B6\u6001\uFF0C\u65B0\u7684MyPromise\u7684\u72B6\u6001\u5C31\u8DDF\u7740\u6539\u53D8"),
    "\\n        ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "p",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "res"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "res",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token parameter" }, "err"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n          ",
    React.createElement("span", { class: "token function" }, "reject"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "finally"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    "cb",
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "\\n      ",
    React.createElement("span", { class: "token parameter" }, "value"),
    "  ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token maybe-class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token function" }, "cb"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n      ",
    React.createElement("span", { class: "token parameter" }, "reason"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token maybe-class-name" }, "MyPromise"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "resolve"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token function" }, "cb"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "then"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token arrow operator" }, "=>"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    " ",
    React.createElement("span", { class: "token keyword control-flow" }, "throw"),
    " reason ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < h2;
id = "%E5%AE%9E%E7%8E%B0-instanceof" > 实现;
InstanceOf < a;
class {
}
"anchor";
href = "#%E5%AE%9E%E7%8E%B0-instanceof" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token comment" }, "// L \u8868\u793A\u5DE6\u8868\u8FBE\u5F0F\uFF0CR \u8868\u793A\u53F3\u8868\u8FBE\u5F0F"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "instance_of"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        React.createElement("span", { class: "token constant" }, "L"),
        React.createElement("span", { class: "token punctuation" }, ","),
        " ",
        React.createElement("span", { class: "token constant" }, "R")),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " ",
    React.createElement("span", { class: "token constant" }, "O"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token class-name" }, "R"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "prototype"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token constant" }, "L"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "L"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "__proto__"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "while"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token boolean" }, "true"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token constant" }, "L"),
    " ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token keyword null nil" }, "null"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token boolean" }, "false"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token comment" }, "// \u8FD9\u91CC\u91CD\u70B9\uFF1A\u5F53 O \u4E25\u683C\u7B49\u4E8E L \u65F6\uFF0C\u8FD4\u56DE true"),
    "\\n        ",
    React.createElement("span", { class: "token keyword control-flow" }, "if"),
    " ",
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token constant" }, "O"),
    " ",
    React.createElement("span", { class: "token operator" }, "==="),
    " ",
    React.createElement("span", { class: "token constant" }, "L"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n            ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token boolean" }, "true"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n        ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n        ",
    React.createElement("span", { class: "token constant" }, "L"),
    " ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token constant" }, "L"),
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token property-access" }, "__proto__"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ;
n < h2;
id = "%E5%AE%9E%E7%8E%B0-asyncawait" > 实现;
async / await < a;
class {
}
"anchor";
href = "#%E5%AE%9E%E7%8E%B0-asyncawait" > ;
a > ;
h2 > ;
n < pre;
class {
}
"language-javascript" > React.createElement("code", { class: "language-javascript" },
    React.createElement("span", { class: "token comment" }, "// \u5C31\u662F\u5229\u7528 generator\uFF08\u751F\u6210\u5668\uFF09\u5206\u5272\u4EE3\u7801\u7247\u6BB5\u3002\u7136\u540E\u6211\u4EEC\u4F7F\u7528\u4E00\u4E2A\u51FD\u6570\u8BA9\u5176\u81EA\u8FED\u4EE3\uFF0C\u6BCF\u4E00\u4E2Ayield \u7528 promise \u5305\u88F9\u8D77\u6765\u3002\u6267\u884C\u4E0B\u4E00\u6B65\u7684\u65F6\u673A\u7531 promise \u6765\u63A7\u5236"),
    "\\n",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "_asyncToGenerator"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "fn"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n  ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n    ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " self ",
    React.createElement("span", { class: "token operator" }, "="),
    " ",
    React.createElement("span", { class: "token keyword" }, "this"),
    React.createElement("span", { class: "token punctuation" }, ","),
    "\\n      args ",
    React.createElement("span", { class: "token operator" }, "="),
    " arguments",
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token comment" }, "// \u5C06\u8FD4\u56DE\u503Cpromise\u5316"),
    "\\n    ",
    React.createElement("span", { class: "token keyword control-flow" }, "return"),
    " ",
    React.createElement("span", { class: "token keyword" }, "new"),
    " ",
    React.createElement("span", { class: "token class-name" }, "Promise"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword" }, "function"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" },
        "resolve",
        React.createElement("span", { class: "token punctuation" }, ","),
        " reject"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u83B7\u53D6\u8FED\u4EE3\u5668\u5B9E\u4F8B"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "var"),
    " gen ",
    React.createElement("span", { class: "token operator" }, "="),
    " fn",
    React.createElement("span", { class: "token punctuation" }, "."),
    React.createElement("span", { class: "token method function property-access" }, "apply"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "self",
    React.createElement("span", { class: "token punctuation" }, ","),
    " args",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u6267\u884C\u4E0B\u4E00\u6B65"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "_next"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "value"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "asyncGeneratorStep"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "gen",
    React.createElement("span", { class: "token punctuation" }, ","),
    " resolve",
    React.createElement("span", { class: "token punctuation" }, ","),
    " reject",
    React.createElement("span", { class: "token punctuation" }, ","),
    " _next",
    React.createElement("span", { class: "token punctuation" }, ","),
    " _throw",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token string" }, "\\'next\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " value",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u629B\u51FA\u5F02\u5E38"),
    "\\n      ",
    React.createElement("span", { class: "token keyword" }, "function"),
    " ",
    React.createElement("span", { class: "token function" }, "_throw"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token parameter" }, "err"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    " ",
    React.createElement("span", { class: "token punctuation" }, ),
    "\\n        ",
    React.createElement("span", { class: "token function" }, "asyncGeneratorStep"),
    React.createElement("span", { class: "token punctuation" }, "("),
    "gen",
    React.createElement("span", { class: "token punctuation" }, ","),
    " resolve",
    React.createElement("span", { class: "token punctuation" }, ","),
    " reject",
    React.createElement("span", { class: "token punctuation" }, ","),
    " _next",
    React.createElement("span", { class: "token punctuation" }, ","),
    " _throw",
    React.createElement("span", { class: "token punctuation" }, ","),
    " ",
    React.createElement("span", { class: "token string" }, "\\'throw\\'"),
    React.createElement("span", { class: "token punctuation" }, ","),
    " err",
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n      ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n      ",
    React.createElement("span", { class: "token comment" }, "// \u7B2C\u4E00\u6B21\u89E6\u53D1"),
    "\\n      ",
    React.createElement("span", { class: "token function" }, "_next"),
    React.createElement("span", { class: "token punctuation" }, "("),
    React.createElement("span", { class: "token keyword nil" }, "undefined"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n    ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ")"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n  ",
    React.createElement("span", { class: "token punctuation" }, "}"),
    React.createElement("span", { class: "token punctuation" }, ";"),
    "\\n",
    React.createElement("span", { class: "token punctuation" }, "}"),
    "\\n");
pre > ';
/>,;
'script';
React.createElement(React.Fragment, null,
    React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
    React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
    React.createElement("script", { src: "/index.js", type: "module" })),
    'toc';
React.createElement("aside", { dangerouslySetInnerHTML: {
        __html: '<nav class="toc"><ol><li><a href="#%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0-add123add1-2-3">一个函数实现 add(1)(2)(3)、add(1, 2, 3)</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-new">动手实现 new</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayisarray">动手实现 Array.isArray</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96">动手实现节流和防抖？</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-arrayprototypereduce">动手实现 Array.prototype.reduce</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-objectcreate">动手实现 Object.create()</a></li><li><a href="#javascript-%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F">JavaScript 实现继承的多种方式</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-callbindapply">动手实现 call()、bind()、apply()</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-mapfilterreduce">动手实现 map()、filter()、reduce()</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%93%8D%E4%BD%9C">实现数组扁平化操作</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-javascript-%E7%BB%A7%E6%89%BF">实现 JavaScript 继承</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-javascript-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">实现 JavaScript 函数重载？</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-json">动手实现 JSON</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-xmlhttprequest">动手实现 XMLHttpRequest</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%85%8B%E9%9A%86">动手实现数组克隆</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86">动手实现对象克隆</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D">动手实现浅拷贝与深拷贝</a></li><li><a href="#%E4%BD%BF%E7%94%A8-mutationobserver-%E5%AE%9E%E7%8E%B0-microtask">使用 MutationObserver 实现 microtask</a></li><li><a href="#%E4%BD%BF%E7%94%A8-proxy-%E6%8B%93%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">使用 Proxy 拓展构造函数</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0">动手实现柯里化函数</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-javascript-aop">动手实现 JavaScript AOP</a></li><li><a href="#%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-promise">动手实现 Promise</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-instanceof">实现 InstanceOf</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-asyncawait">实现 async/await</a></li></ol></nav>'
    } });
